// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/vpineda1996/wsfetch/internal/marshalling"
)

// Account includes the GraphQL fields of Account requested by the fragment Account.
type Account struct {
	Id                           string                                 `json:"id"`
	ApplicationFamilyId          string                                 `json:"applicationFamilyId"`
	ArchivedAt                   *string                                `json:"archivedAt"`
	Branch                       string                                 `json:"branch"`
	Category                     string                                 `json:"category"`
	ClosedAt                     *string                                `json:"closedAt"`
	CreatedAt                    string                                 `json:"createdAt"`
	CacheExpiredAt               string                                 `json:"cacheExpiredAt"`
	Currency                     string                                 `json:"currency"`
	RequiredIdentityVerification string                                 `json:"requiredIdentityVerification"`
	UnifiedAccountType           string                                 `json:"unifiedAccountType"`
	UpdatedAt                    string                                 `json:"updatedAt"`
	Nickname                     *string                                `json:"nickname"`
	Status                       string                                 `json:"status"`
	AccountOwnerConfiguration    *string                                `json:"accountOwnerConfiguration"`
	AccountFeatures              []AccountAccountFeaturesAccountFeature `json:"accountFeatures"`
	AccountOwners                []AccountAccountOwnersAccountOwner     `json:"accountOwners"`
	Type                         string                                 `json:"type"`
	Typename                     *string                                `json:"__typename"`
}

// GetId returns Account.Id, and is useful for accessing the field via an interface.
func (v *Account) GetId() string { return v.Id }

// GetApplicationFamilyId returns Account.ApplicationFamilyId, and is useful for accessing the field via an interface.
func (v *Account) GetApplicationFamilyId() string { return v.ApplicationFamilyId }

// GetArchivedAt returns Account.ArchivedAt, and is useful for accessing the field via an interface.
func (v *Account) GetArchivedAt() *string { return v.ArchivedAt }

// GetBranch returns Account.Branch, and is useful for accessing the field via an interface.
func (v *Account) GetBranch() string { return v.Branch }

// GetCategory returns Account.Category, and is useful for accessing the field via an interface.
func (v *Account) GetCategory() string { return v.Category }

// GetClosedAt returns Account.ClosedAt, and is useful for accessing the field via an interface.
func (v *Account) GetClosedAt() *string { return v.ClosedAt }

// GetCreatedAt returns Account.CreatedAt, and is useful for accessing the field via an interface.
func (v *Account) GetCreatedAt() string { return v.CreatedAt }

// GetCacheExpiredAt returns Account.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *Account) GetCacheExpiredAt() string { return v.CacheExpiredAt }

// GetCurrency returns Account.Currency, and is useful for accessing the field via an interface.
func (v *Account) GetCurrency() string { return v.Currency }

// GetRequiredIdentityVerification returns Account.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *Account) GetRequiredIdentityVerification() string { return v.RequiredIdentityVerification }

// GetUnifiedAccountType returns Account.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *Account) GetUnifiedAccountType() string { return v.UnifiedAccountType }

// GetUpdatedAt returns Account.UpdatedAt, and is useful for accessing the field via an interface.
func (v *Account) GetUpdatedAt() string { return v.UpdatedAt }

// GetNickname returns Account.Nickname, and is useful for accessing the field via an interface.
func (v *Account) GetNickname() *string { return v.Nickname }

// GetStatus returns Account.Status, and is useful for accessing the field via an interface.
func (v *Account) GetStatus() string { return v.Status }

// GetAccountOwnerConfiguration returns Account.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *Account) GetAccountOwnerConfiguration() *string { return v.AccountOwnerConfiguration }

// GetAccountFeatures returns Account.AccountFeatures, and is useful for accessing the field via an interface.
func (v *Account) GetAccountFeatures() []AccountAccountFeaturesAccountFeature {
	return v.AccountFeatures
}

// GetAccountOwners returns Account.AccountOwners, and is useful for accessing the field via an interface.
func (v *Account) GetAccountOwners() []AccountAccountOwnersAccountOwner { return v.AccountOwners }

// GetType returns Account.Type, and is useful for accessing the field via an interface.
func (v *Account) GetType() string { return v.Type }

// GetTypename returns Account.Typename, and is useful for accessing the field via an interface.
func (v *Account) GetTypename() *string { return v.Typename }

// AccountAccountFeaturesAccountFeature includes the requested fields of the GraphQL type AccountFeature.
type AccountAccountFeaturesAccountFeature struct {
	AccountFeature `json:"-"`
	Typename       *string `json:"__typename"`
}

// GetTypename returns AccountAccountFeaturesAccountFeature.Typename, and is useful for accessing the field via an interface.
func (v *AccountAccountFeaturesAccountFeature) GetTypename() *string { return v.Typename }

// GetName returns AccountAccountFeaturesAccountFeature.Name, and is useful for accessing the field via an interface.
func (v *AccountAccountFeaturesAccountFeature) GetName() string { return v.AccountFeature.Name }

// GetEnabled returns AccountAccountFeaturesAccountFeature.Enabled, and is useful for accessing the field via an interface.
func (v *AccountAccountFeaturesAccountFeature) GetEnabled() bool { return v.AccountFeature.Enabled }

func (v *AccountAccountFeaturesAccountFeature) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountAccountFeaturesAccountFeature
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountAccountFeaturesAccountFeature = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountFeature)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountAccountFeaturesAccountFeature struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`
}

func (v *AccountAccountFeaturesAccountFeature) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountAccountFeaturesAccountFeature) __premarshalJSON() (*__premarshalAccountAccountFeaturesAccountFeature, error) {
	var retval __premarshalAccountAccountFeaturesAccountFeature

	retval.Typename = v.Typename
	retval.Name = v.AccountFeature.Name
	retval.Enabled = v.AccountFeature.Enabled
	return &retval, nil
}

// AccountAccountOwnersAccountOwner includes the requested fields of the GraphQL type AccountOwner.
type AccountAccountOwnersAccountOwner struct {
	AccountOwner `json:"-"`
	Typename     *string `json:"__typename"`
}

// GetTypename returns AccountAccountOwnersAccountOwner.Typename, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetTypename() *string { return v.Typename }

// GetAccountId returns AccountAccountOwnersAccountOwner.AccountId, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetAccountId() string { return v.AccountOwner.AccountId }

// GetIdentityId returns AccountAccountOwnersAccountOwner.IdentityId, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetIdentityId() string { return v.AccountOwner.IdentityId }

// GetAccountNickname returns AccountAccountOwnersAccountOwner.AccountNickname, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetAccountNickname() string {
	return v.AccountOwner.AccountNickname
}

// GetClientCanonicalId returns AccountAccountOwnersAccountOwner.ClientCanonicalId, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetClientCanonicalId() string {
	return v.AccountOwner.ClientCanonicalId
}

// GetAccountOpeningAgreementsSigned returns AccountAccountOwnersAccountOwner.AccountOpeningAgreementsSigned, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetAccountOpeningAgreementsSigned() bool {
	return v.AccountOwner.AccountOpeningAgreementsSigned
}

// GetName returns AccountAccountOwnersAccountOwner.Name, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetName() string { return v.AccountOwner.Name }

// GetEmail returns AccountAccountOwnersAccountOwner.Email, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetEmail() string { return v.AccountOwner.Email }

// GetOwnershipType returns AccountAccountOwnersAccountOwner.OwnershipType, and is useful for accessing the field via an interface.
func (v *AccountAccountOwnersAccountOwner) GetOwnershipType() string {
	return v.AccountOwner.OwnershipType
}

func (v *AccountAccountOwnersAccountOwner) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountAccountOwnersAccountOwner
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountAccountOwnersAccountOwner = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountOwner)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountAccountOwnersAccountOwner struct {
	Typename *string `json:"__typename"`

	AccountId string `json:"accountId"`

	IdentityId string `json:"identityId"`

	AccountNickname string `json:"accountNickname"`

	ClientCanonicalId string `json:"clientCanonicalId"`

	AccountOpeningAgreementsSigned bool `json:"accountOpeningAgreementsSigned"`

	Name string `json:"name"`

	Email string `json:"email"`

	OwnershipType string `json:"ownershipType"`
}

func (v *AccountAccountOwnersAccountOwner) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountAccountOwnersAccountOwner) __premarshalJSON() (*__premarshalAccountAccountOwnersAccountOwner, error) {
	var retval __premarshalAccountAccountOwnersAccountOwner

	retval.Typename = v.Typename
	retval.AccountId = v.AccountOwner.AccountId
	retval.IdentityId = v.AccountOwner.IdentityId
	retval.AccountNickname = v.AccountOwner.AccountNickname
	retval.ClientCanonicalId = v.AccountOwner.ClientCanonicalId
	retval.AccountOpeningAgreementsSigned = v.AccountOwner.AccountOpeningAgreementsSigned
	retval.Name = v.AccountOwner.Name
	retval.Email = v.AccountOwner.Email
	retval.OwnershipType = v.AccountOwner.OwnershipType
	return &retval, nil
}

// AccountFeature includes the GraphQL fields of AccountFeature requested by the fragment AccountFeature.
type AccountFeature struct {
	Name     string  `json:"name"`
	Enabled  bool    `json:"enabled"`
	Typename *string `json:"__typename"`
}

// GetName returns AccountFeature.Name, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetName() string { return v.Name }

// GetEnabled returns AccountFeature.Enabled, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetEnabled() bool { return v.Enabled }

// GetTypename returns AccountFeature.Typename, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetTypename() *string { return v.Typename }

// AccountOwner includes the GraphQL fields of AccountOwner requested by the fragment AccountOwner.
type AccountOwner struct {
	AccountId                      string  `json:"accountId"`
	IdentityId                     string  `json:"identityId"`
	AccountNickname                string  `json:"accountNickname"`
	ClientCanonicalId              string  `json:"clientCanonicalId"`
	AccountOpeningAgreementsSigned bool    `json:"accountOpeningAgreementsSigned"`
	Name                           string  `json:"name"`
	Email                          string  `json:"email"`
	OwnershipType                  string  `json:"ownershipType"`
	Typename                       *string `json:"__typename"`
}

// GetAccountId returns AccountOwner.AccountId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountId() string { return v.AccountId }

// GetIdentityId returns AccountOwner.IdentityId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetIdentityId() string { return v.IdentityId }

// GetAccountNickname returns AccountOwner.AccountNickname, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountNickname() string { return v.AccountNickname }

// GetClientCanonicalId returns AccountOwner.ClientCanonicalId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetClientCanonicalId() string { return v.ClientCanonicalId }

// GetAccountOpeningAgreementsSigned returns AccountOwner.AccountOpeningAgreementsSigned, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountOpeningAgreementsSigned() bool {
	return v.AccountOpeningAgreementsSigned
}

// GetName returns AccountOwner.Name, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetName() string { return v.Name }

// GetEmail returns AccountOwner.Email, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetEmail() string { return v.Email }

// GetOwnershipType returns AccountOwner.OwnershipType, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetOwnershipType() string { return v.OwnershipType }

// GetTypename returns AccountOwner.Typename, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetTypename() *string { return v.Typename }

// AccountWithLink includes the GraphQL fields of Account requested by the fragment AccountWithLink.
type AccountWithLink struct {
	Account       `json:"-"`
	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`
	Typename      *string                       `json:"__typename"`
}

// GetLinkedAccount returns AccountWithLink.LinkedAccount, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetLinkedAccount() *AccountWithLinkLinkedAccount { return v.LinkedAccount }

// GetTypename returns AccountWithLink.Typename, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetTypename() *string { return v.Typename }

// GetId returns AccountWithLink.Id, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetId() string { return v.Account.Id }

// GetApplicationFamilyId returns AccountWithLink.ApplicationFamilyId, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetApplicationFamilyId() string { return v.Account.ApplicationFamilyId }

// GetArchivedAt returns AccountWithLink.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetArchivedAt() *string { return v.Account.ArchivedAt }

// GetBranch returns AccountWithLink.Branch, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetBranch() string { return v.Account.Branch }

// GetCategory returns AccountWithLink.Category, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCategory() string { return v.Account.Category }

// GetClosedAt returns AccountWithLink.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetClosedAt() *string { return v.Account.ClosedAt }

// GetCreatedAt returns AccountWithLink.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCreatedAt() string { return v.Account.CreatedAt }

// GetCacheExpiredAt returns AccountWithLink.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCacheExpiredAt() string { return v.Account.CacheExpiredAt }

// GetCurrency returns AccountWithLink.Currency, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCurrency() string { return v.Account.Currency }

// GetRequiredIdentityVerification returns AccountWithLink.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetRequiredIdentityVerification() string {
	return v.Account.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountWithLink.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetUnifiedAccountType() string { return v.Account.UnifiedAccountType }

// GetUpdatedAt returns AccountWithLink.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetUpdatedAt() string { return v.Account.UpdatedAt }

// GetNickname returns AccountWithLink.Nickname, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetNickname() *string { return v.Account.Nickname }

// GetStatus returns AccountWithLink.Status, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetStatus() string { return v.Account.Status }

// GetAccountOwnerConfiguration returns AccountWithLink.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountOwnerConfiguration() *string {
	return v.Account.AccountOwnerConfiguration
}

// GetAccountFeatures returns AccountWithLink.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountFeatures() []AccountAccountFeaturesAccountFeature {
	return v.Account.AccountFeatures
}

// GetAccountOwners returns AccountWithLink.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountOwners() []AccountAccountOwnersAccountOwner {
	return v.Account.AccountOwners
}

// GetType returns AccountWithLink.Type, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetType() string { return v.Account.Type }

func (v *AccountWithLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountWithLink
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountWithLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Account)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountWithLink struct {
	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`

	Typename *string `json:"__typename"`

	Id string `json:"id"`

	ApplicationFamilyId string `json:"applicationFamilyId"`

	ArchivedAt *string `json:"archivedAt"`

	Branch string `json:"branch"`

	Category string `json:"category"`

	ClosedAt *string `json:"closedAt"`

	CreatedAt string `json:"createdAt"`

	CacheExpiredAt string `json:"cacheExpiredAt"`

	Currency string `json:"currency"`

	RequiredIdentityVerification string `json:"requiredIdentityVerification"`

	UnifiedAccountType string `json:"unifiedAccountType"`

	UpdatedAt string `json:"updatedAt"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountAccountOwnersAccountOwner `json:"accountOwners"`

	Type string `json:"type"`
}

func (v *AccountWithLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountWithLink) __premarshalJSON() (*__premarshalAccountWithLink, error) {
	var retval __premarshalAccountWithLink

	retval.LinkedAccount = v.LinkedAccount
	retval.Typename = v.Typename
	retval.Id = v.Account.Id
	retval.ApplicationFamilyId = v.Account.ApplicationFamilyId
	retval.ArchivedAt = v.Account.ArchivedAt
	retval.Branch = v.Account.Branch
	retval.Category = v.Account.Category
	retval.ClosedAt = v.Account.ClosedAt
	retval.CreatedAt = v.Account.CreatedAt
	retval.CacheExpiredAt = v.Account.CacheExpiredAt
	retval.Currency = v.Account.Currency
	retval.RequiredIdentityVerification = v.Account.RequiredIdentityVerification
	retval.UnifiedAccountType = v.Account.UnifiedAccountType
	retval.UpdatedAt = v.Account.UpdatedAt
	retval.Nickname = v.Account.Nickname
	retval.Status = v.Account.Status
	retval.AccountOwnerConfiguration = v.Account.AccountOwnerConfiguration
	retval.AccountFeatures = v.Account.AccountFeatures
	retval.AccountOwners = v.Account.AccountOwners
	retval.Type = v.Account.Type
	return &retval, nil
}

// AccountWithLinkLinkedAccount includes the requested fields of the GraphQL type Account.
type AccountWithLinkLinkedAccount struct {
	Account  `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountWithLinkLinkedAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetTypename() *string { return v.Typename }

// GetId returns AccountWithLinkLinkedAccount.Id, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetId() string { return v.Account.Id }

// GetApplicationFamilyId returns AccountWithLinkLinkedAccount.ApplicationFamilyId, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetApplicationFamilyId() string {
	return v.Account.ApplicationFamilyId
}

// GetArchivedAt returns AccountWithLinkLinkedAccount.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetArchivedAt() *string { return v.Account.ArchivedAt }

// GetBranch returns AccountWithLinkLinkedAccount.Branch, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetBranch() string { return v.Account.Branch }

// GetCategory returns AccountWithLinkLinkedAccount.Category, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCategory() string { return v.Account.Category }

// GetClosedAt returns AccountWithLinkLinkedAccount.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetClosedAt() *string { return v.Account.ClosedAt }

// GetCreatedAt returns AccountWithLinkLinkedAccount.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCreatedAt() string { return v.Account.CreatedAt }

// GetCacheExpiredAt returns AccountWithLinkLinkedAccount.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCacheExpiredAt() string { return v.Account.CacheExpiredAt }

// GetCurrency returns AccountWithLinkLinkedAccount.Currency, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCurrency() string { return v.Account.Currency }

// GetRequiredIdentityVerification returns AccountWithLinkLinkedAccount.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetRequiredIdentityVerification() string {
	return v.Account.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountWithLinkLinkedAccount.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetUnifiedAccountType() string {
	return v.Account.UnifiedAccountType
}

// GetUpdatedAt returns AccountWithLinkLinkedAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetUpdatedAt() string { return v.Account.UpdatedAt }

// GetNickname returns AccountWithLinkLinkedAccount.Nickname, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetNickname() *string { return v.Account.Nickname }

// GetStatus returns AccountWithLinkLinkedAccount.Status, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetStatus() string { return v.Account.Status }

// GetAccountOwnerConfiguration returns AccountWithLinkLinkedAccount.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountOwnerConfiguration() *string {
	return v.Account.AccountOwnerConfiguration
}

// GetAccountFeatures returns AccountWithLinkLinkedAccount.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountFeatures() []AccountAccountFeaturesAccountFeature {
	return v.Account.AccountFeatures
}

// GetAccountOwners returns AccountWithLinkLinkedAccount.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountOwners() []AccountAccountOwnersAccountOwner {
	return v.Account.AccountOwners
}

// GetType returns AccountWithLinkLinkedAccount.Type, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetType() string { return v.Account.Type }

func (v *AccountWithLinkLinkedAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountWithLinkLinkedAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountWithLinkLinkedAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Account)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountWithLinkLinkedAccount struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	ApplicationFamilyId string `json:"applicationFamilyId"`

	ArchivedAt *string `json:"archivedAt"`

	Branch string `json:"branch"`

	Category string `json:"category"`

	ClosedAt *string `json:"closedAt"`

	CreatedAt string `json:"createdAt"`

	CacheExpiredAt string `json:"cacheExpiredAt"`

	Currency string `json:"currency"`

	RequiredIdentityVerification string `json:"requiredIdentityVerification"`

	UnifiedAccountType string `json:"unifiedAccountType"`

	UpdatedAt string `json:"updatedAt"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountAccountOwnersAccountOwner `json:"accountOwners"`

	Type string `json:"type"`
}

func (v *AccountWithLinkLinkedAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountWithLinkLinkedAccount) __premarshalJSON() (*__premarshalAccountWithLinkLinkedAccount, error) {
	var retval __premarshalAccountWithLinkLinkedAccount

	retval.Typename = v.Typename
	retval.Id = v.Account.Id
	retval.ApplicationFamilyId = v.Account.ApplicationFamilyId
	retval.ArchivedAt = v.Account.ArchivedAt
	retval.Branch = v.Account.Branch
	retval.Category = v.Account.Category
	retval.ClosedAt = v.Account.ClosedAt
	retval.CreatedAt = v.Account.CreatedAt
	retval.CacheExpiredAt = v.Account.CacheExpiredAt
	retval.Currency = v.Account.Currency
	retval.RequiredIdentityVerification = v.Account.RequiredIdentityVerification
	retval.UnifiedAccountType = v.Account.UnifiedAccountType
	retval.UpdatedAt = v.Account.UpdatedAt
	retval.Nickname = v.Account.Nickname
	retval.Status = v.Account.Status
	retval.AccountOwnerConfiguration = v.Account.AccountOwnerConfiguration
	retval.AccountFeatures = v.Account.AccountFeatures
	retval.AccountOwners = v.Account.AccountOwners
	retval.Type = v.Account.Type
	return &retval, nil
}

// Activity includes the GraphQL fields of ActivityFeedItem requested by the fragment Activity.
type Activity struct {
	AccountId                     string    `json:"accountId"`
	AftOriginatorName             *string   `json:"aftOriginatorName"`
	AftTransactionCategory        *string   `json:"aftTransactionCategory"`
	AftTransactionType            *string   `json:"aftTransactionType"`
	Amount                        string    `json:"amount"`
	AmountSign                    string    `json:"amountSign"`
	AssetQuantity                 *string   `json:"assetQuantity"`
	AssetSymbol                   *string   `json:"assetSymbol"`
	CanonicalId                   *string   `json:"canonicalId"`
	Currency                      *string   `json:"currency"`
	ETransferEmail                *string   `json:"eTransferEmail"`
	ETransferName                 *string   `json:"eTransferName"`
	ExternalCanonicalId           *string   `json:"externalCanonicalId"`
	IdentityId                    string    `json:"identityId"`
	InstitutionName               *string   `json:"institutionName"`
	OccurredAt                    time.Time `json:"-"`
	P2pHandle                     *string   `json:"p2pHandle"`
	P2pMessage                    *string   `json:"p2pMessage"`
	SpendMerchant                 *string   `json:"spendMerchant"`
	SecurityId                    *string   `json:"securityId"`
	BillPayCompanyName            *string   `json:"billPayCompanyName"`
	BillPayPayeeNickname          *string   `json:"billPayPayeeNickname"`
	RedactedExternalAccountNumber *string   `json:"redactedExternalAccountNumber"`
	OpposingAccountId             *string   `json:"opposingAccountId"`
	Status                        *string   `json:"status"`
	SubType                       *string   `json:"subType"`
	Type                          string    `json:"type"`
	StrikePrice                   *string   `json:"strikePrice"`
	ContractType                  *string   `json:"contractType"`
	ExpiryDate                    *string   `json:"expiryDate"`
	ChequeNumber                  *string   `json:"chequeNumber"`
	ProvisionalCreditAmount       *string   `json:"provisionalCreditAmount"`
	PrimaryBlocker                *string   `json:"primaryBlocker"`
	InterestRate                  *string   `json:"interestRate"`
	Frequency                     *string   `json:"frequency"`
	Typename                      *string   `json:"__typename"`
}

// GetAccountId returns Activity.AccountId, and is useful for accessing the field via an interface.
func (v *Activity) GetAccountId() string { return v.AccountId }

// GetAftOriginatorName returns Activity.AftOriginatorName, and is useful for accessing the field via an interface.
func (v *Activity) GetAftOriginatorName() *string { return v.AftOriginatorName }

// GetAftTransactionCategory returns Activity.AftTransactionCategory, and is useful for accessing the field via an interface.
func (v *Activity) GetAftTransactionCategory() *string { return v.AftTransactionCategory }

// GetAftTransactionType returns Activity.AftTransactionType, and is useful for accessing the field via an interface.
func (v *Activity) GetAftTransactionType() *string { return v.AftTransactionType }

// GetAmount returns Activity.Amount, and is useful for accessing the field via an interface.
func (v *Activity) GetAmount() string { return v.Amount }

// GetAmountSign returns Activity.AmountSign, and is useful for accessing the field via an interface.
func (v *Activity) GetAmountSign() string { return v.AmountSign }

// GetAssetQuantity returns Activity.AssetQuantity, and is useful for accessing the field via an interface.
func (v *Activity) GetAssetQuantity() *string { return v.AssetQuantity }

// GetAssetSymbol returns Activity.AssetSymbol, and is useful for accessing the field via an interface.
func (v *Activity) GetAssetSymbol() *string { return v.AssetSymbol }

// GetCanonicalId returns Activity.CanonicalId, and is useful for accessing the field via an interface.
func (v *Activity) GetCanonicalId() *string { return v.CanonicalId }

// GetCurrency returns Activity.Currency, and is useful for accessing the field via an interface.
func (v *Activity) GetCurrency() *string { return v.Currency }

// GetETransferEmail returns Activity.ETransferEmail, and is useful for accessing the field via an interface.
func (v *Activity) GetETransferEmail() *string { return v.ETransferEmail }

// GetETransferName returns Activity.ETransferName, and is useful for accessing the field via an interface.
func (v *Activity) GetETransferName() *string { return v.ETransferName }

// GetExternalCanonicalId returns Activity.ExternalCanonicalId, and is useful for accessing the field via an interface.
func (v *Activity) GetExternalCanonicalId() *string { return v.ExternalCanonicalId }

// GetIdentityId returns Activity.IdentityId, and is useful for accessing the field via an interface.
func (v *Activity) GetIdentityId() string { return v.IdentityId }

// GetInstitutionName returns Activity.InstitutionName, and is useful for accessing the field via an interface.
func (v *Activity) GetInstitutionName() *string { return v.InstitutionName }

// GetOccurredAt returns Activity.OccurredAt, and is useful for accessing the field via an interface.
func (v *Activity) GetOccurredAt() time.Time { return v.OccurredAt }

// GetP2pHandle returns Activity.P2pHandle, and is useful for accessing the field via an interface.
func (v *Activity) GetP2pHandle() *string { return v.P2pHandle }

// GetP2pMessage returns Activity.P2pMessage, and is useful for accessing the field via an interface.
func (v *Activity) GetP2pMessage() *string { return v.P2pMessage }

// GetSpendMerchant returns Activity.SpendMerchant, and is useful for accessing the field via an interface.
func (v *Activity) GetSpendMerchant() *string { return v.SpendMerchant }

// GetSecurityId returns Activity.SecurityId, and is useful for accessing the field via an interface.
func (v *Activity) GetSecurityId() *string { return v.SecurityId }

// GetBillPayCompanyName returns Activity.BillPayCompanyName, and is useful for accessing the field via an interface.
func (v *Activity) GetBillPayCompanyName() *string { return v.BillPayCompanyName }

// GetBillPayPayeeNickname returns Activity.BillPayPayeeNickname, and is useful for accessing the field via an interface.
func (v *Activity) GetBillPayPayeeNickname() *string { return v.BillPayPayeeNickname }

// GetRedactedExternalAccountNumber returns Activity.RedactedExternalAccountNumber, and is useful for accessing the field via an interface.
func (v *Activity) GetRedactedExternalAccountNumber() *string { return v.RedactedExternalAccountNumber }

// GetOpposingAccountId returns Activity.OpposingAccountId, and is useful for accessing the field via an interface.
func (v *Activity) GetOpposingAccountId() *string { return v.OpposingAccountId }

// GetStatus returns Activity.Status, and is useful for accessing the field via an interface.
func (v *Activity) GetStatus() *string { return v.Status }

// GetSubType returns Activity.SubType, and is useful for accessing the field via an interface.
func (v *Activity) GetSubType() *string { return v.SubType }

// GetType returns Activity.Type, and is useful for accessing the field via an interface.
func (v *Activity) GetType() string { return v.Type }

// GetStrikePrice returns Activity.StrikePrice, and is useful for accessing the field via an interface.
func (v *Activity) GetStrikePrice() *string { return v.StrikePrice }

// GetContractType returns Activity.ContractType, and is useful for accessing the field via an interface.
func (v *Activity) GetContractType() *string { return v.ContractType }

// GetExpiryDate returns Activity.ExpiryDate, and is useful for accessing the field via an interface.
func (v *Activity) GetExpiryDate() *string { return v.ExpiryDate }

// GetChequeNumber returns Activity.ChequeNumber, and is useful for accessing the field via an interface.
func (v *Activity) GetChequeNumber() *string { return v.ChequeNumber }

// GetProvisionalCreditAmount returns Activity.ProvisionalCreditAmount, and is useful for accessing the field via an interface.
func (v *Activity) GetProvisionalCreditAmount() *string { return v.ProvisionalCreditAmount }

// GetPrimaryBlocker returns Activity.PrimaryBlocker, and is useful for accessing the field via an interface.
func (v *Activity) GetPrimaryBlocker() *string { return v.PrimaryBlocker }

// GetInterestRate returns Activity.InterestRate, and is useful for accessing the field via an interface.
func (v *Activity) GetInterestRate() *string { return v.InterestRate }

// GetFrequency returns Activity.Frequency, and is useful for accessing the field via an interface.
func (v *Activity) GetFrequency() *string { return v.Frequency }

// GetTypename returns Activity.Typename, and is useful for accessing the field via an interface.
func (v *Activity) GetTypename() *string { return v.Typename }

func (v *Activity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Activity
		OccurredAt json.RawMessage `json:"occurredAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Activity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.OccurredAt
		src := firstPass.OccurredAt
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Activity.OccurredAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshalActivity struct {
	AccountId string `json:"accountId"`

	AftOriginatorName *string `json:"aftOriginatorName"`

	AftTransactionCategory *string `json:"aftTransactionCategory"`

	AftTransactionType *string `json:"aftTransactionType"`

	Amount string `json:"amount"`

	AmountSign string `json:"amountSign"`

	AssetQuantity *string `json:"assetQuantity"`

	AssetSymbol *string `json:"assetSymbol"`

	CanonicalId *string `json:"canonicalId"`

	Currency *string `json:"currency"`

	ETransferEmail *string `json:"eTransferEmail"`

	ETransferName *string `json:"eTransferName"`

	ExternalCanonicalId *string `json:"externalCanonicalId"`

	IdentityId string `json:"identityId"`

	InstitutionName *string `json:"institutionName"`

	OccurredAt json.RawMessage `json:"occurredAt"`

	P2pHandle *string `json:"p2pHandle"`

	P2pMessage *string `json:"p2pMessage"`

	SpendMerchant *string `json:"spendMerchant"`

	SecurityId *string `json:"securityId"`

	BillPayCompanyName *string `json:"billPayCompanyName"`

	BillPayPayeeNickname *string `json:"billPayPayeeNickname"`

	RedactedExternalAccountNumber *string `json:"redactedExternalAccountNumber"`

	OpposingAccountId *string `json:"opposingAccountId"`

	Status *string `json:"status"`

	SubType *string `json:"subType"`

	Type string `json:"type"`

	StrikePrice *string `json:"strikePrice"`

	ContractType *string `json:"contractType"`

	ExpiryDate *string `json:"expiryDate"`

	ChequeNumber *string `json:"chequeNumber"`

	ProvisionalCreditAmount *string `json:"provisionalCreditAmount"`

	PrimaryBlocker *string `json:"primaryBlocker"`

	InterestRate *string `json:"interestRate"`

	Frequency *string `json:"frequency"`

	Typename *string `json:"__typename"`
}

func (v *Activity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Activity) __premarshalJSON() (*__premarshalActivity, error) {
	var retval __premarshalActivity

	retval.AccountId = v.AccountId
	retval.AftOriginatorName = v.AftOriginatorName
	retval.AftTransactionCategory = v.AftTransactionCategory
	retval.AftTransactionType = v.AftTransactionType
	retval.Amount = v.Amount
	retval.AmountSign = v.AmountSign
	retval.AssetQuantity = v.AssetQuantity
	retval.AssetSymbol = v.AssetSymbol
	retval.CanonicalId = v.CanonicalId
	retval.Currency = v.Currency
	retval.ETransferEmail = v.ETransferEmail
	retval.ETransferName = v.ETransferName
	retval.ExternalCanonicalId = v.ExternalCanonicalId
	retval.IdentityId = v.IdentityId
	retval.InstitutionName = v.InstitutionName
	{

		dst := &retval.OccurredAt
		src := v.OccurredAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Activity.OccurredAt: %w", err)
		}
	}
	retval.P2pHandle = v.P2pHandle
	retval.P2pMessage = v.P2pMessage
	retval.SpendMerchant = v.SpendMerchant
	retval.SecurityId = v.SecurityId
	retval.BillPayCompanyName = v.BillPayCompanyName
	retval.BillPayPayeeNickname = v.BillPayPayeeNickname
	retval.RedactedExternalAccountNumber = v.RedactedExternalAccountNumber
	retval.OpposingAccountId = v.OpposingAccountId
	retval.Status = v.Status
	retval.SubType = v.SubType
	retval.Type = v.Type
	retval.StrikePrice = v.StrikePrice
	retval.ContractType = v.ContractType
	retval.ExpiryDate = v.ExpiryDate
	retval.ChequeNumber = v.ChequeNumber
	retval.ProvisionalCreditAmount = v.ProvisionalCreditAmount
	retval.PrimaryBlocker = v.PrimaryBlocker
	retval.InterestRate = v.InterestRate
	retval.Frequency = v.Frequency
	retval.Typename = v.Typename
	return &retval, nil
}

// AllAccounts includes the GraphQL fields of Identity requested by the fragment AllAccounts.
type AllAccounts struct {
	Accounts AllAccountsAccountsAccountConnection `json:"accounts"`
	Typename *string                              `json:"__typename"`
}

// GetAccounts returns AllAccounts.Accounts, and is useful for accessing the field via an interface.
func (v *AllAccounts) GetAccounts() AllAccountsAccountsAccountConnection { return v.Accounts }

// GetTypename returns AllAccounts.Typename, and is useful for accessing the field via an interface.
func (v *AllAccounts) GetTypename() *string { return v.Typename }

// AllAccountsAccountsAccountConnection includes the requested fields of the GraphQL type AccountConnection.
type AllAccountsAccountsAccountConnection struct {
	PageInfo AllAccountsAccountsAccountConnectionPageInfo           `json:"pageInfo"`
	Edges    []AllAccountsAccountsAccountConnectionEdgesAccountEdge `json:"edges"`
	Typename *string                                                `json:"__typename"`
}

// GetPageInfo returns AllAccountsAccountsAccountConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnection) GetPageInfo() AllAccountsAccountsAccountConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AllAccountsAccountsAccountConnection.Edges, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnection) GetEdges() []AllAccountsAccountsAccountConnectionEdgesAccountEdge {
	return v.Edges
}

// GetTypename returns AllAccountsAccountsAccountConnection.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnection) GetTypename() *string { return v.Typename }

// AllAccountsAccountsAccountConnectionEdgesAccountEdge includes the requested fields of the GraphQL type AccountEdge.
type AllAccountsAccountsAccountConnectionEdgesAccountEdge struct {
	Cursor   string                                                          `json:"cursor"`
	Node     AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount `json:"node"`
	Typename *string                                                         `json:"__typename"`
}

// GetCursor returns AllAccountsAccountsAccountConnectionEdgesAccountEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdge) GetCursor() string { return v.Cursor }

// GetNode returns AllAccountsAccountsAccountConnectionEdgesAccountEdge.Node, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdge) GetNode() AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount {
	return v.Node
}

// GetTypename returns AllAccountsAccountsAccountConnectionEdgesAccountEdge.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdge) GetTypename() *string {
	return v.Typename
}

// AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount struct {
	AccountWithLink `json:"-"`
	Typename        *string `json:"__typename"`
}

// GetTypename returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// GetLinkedAccount returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.LinkedAccount, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetLinkedAccount() *AccountWithLinkLinkedAccount {
	return v.AccountWithLink.LinkedAccount
}

// GetId returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Id, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetId() string {
	return v.AccountWithLink.Account.Id
}

// GetApplicationFamilyId returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.ApplicationFamilyId, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetApplicationFamilyId() string {
	return v.AccountWithLink.Account.ApplicationFamilyId
}

// GetArchivedAt returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetArchivedAt() *string {
	return v.AccountWithLink.Account.ArchivedAt
}

// GetBranch returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Branch, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetBranch() string {
	return v.AccountWithLink.Account.Branch
}

// GetCategory returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Category, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCategory() string {
	return v.AccountWithLink.Account.Category
}

// GetClosedAt returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.ClosedAt, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetClosedAt() *string {
	return v.AccountWithLink.Account.ClosedAt
}

// GetCreatedAt returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.CreatedAt, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCreatedAt() string {
	return v.AccountWithLink.Account.CreatedAt
}

// GetCacheExpiredAt returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCacheExpiredAt() string {
	return v.AccountWithLink.Account.CacheExpiredAt
}

// GetCurrency returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Currency, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCurrency() string {
	return v.AccountWithLink.Account.Currency
}

// GetRequiredIdentityVerification returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetRequiredIdentityVerification() string {
	return v.AccountWithLink.Account.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetUnifiedAccountType() string {
	return v.AccountWithLink.Account.UnifiedAccountType
}

// GetUpdatedAt returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetUpdatedAt() string {
	return v.AccountWithLink.Account.UpdatedAt
}

// GetNickname returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Nickname, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetNickname() *string {
	return v.AccountWithLink.Account.Nickname
}

// GetStatus returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Status, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetStatus() string {
	return v.AccountWithLink.Account.Status
}

// GetAccountOwnerConfiguration returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountOwnerConfiguration() *string {
	return v.AccountWithLink.Account.AccountOwnerConfiguration
}

// GetAccountFeatures returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountFeatures() []AccountAccountFeaturesAccountFeature {
	return v.AccountWithLink.Account.AccountFeatures
}

// GetAccountOwners returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountOwners, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountOwners() []AccountAccountOwnersAccountOwner {
	return v.AccountWithLink.Account.AccountOwners
}

// GetType returns AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Type, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetType() string {
	return v.AccountWithLink.Account.Type
}

func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountWithLink)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount struct {
	Typename *string `json:"__typename"`

	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`

	Id string `json:"id"`

	ApplicationFamilyId string `json:"applicationFamilyId"`

	ArchivedAt *string `json:"archivedAt"`

	Branch string `json:"branch"`

	Category string `json:"category"`

	ClosedAt *string `json:"closedAt"`

	CreatedAt string `json:"createdAt"`

	CacheExpiredAt string `json:"cacheExpiredAt"`

	Currency string `json:"currency"`

	RequiredIdentityVerification string `json:"requiredIdentityVerification"`

	UnifiedAccountType string `json:"unifiedAccountType"`

	UpdatedAt string `json:"updatedAt"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountAccountOwnersAccountOwner `json:"accountOwners"`

	Type string `json:"type"`
}

func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) __premarshalJSON() (*__premarshalAllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount, error) {
	var retval __premarshalAllAccountsAccountsAccountConnectionEdgesAccountEdgeNodeAccount

	retval.Typename = v.Typename
	retval.LinkedAccount = v.AccountWithLink.LinkedAccount
	retval.Id = v.AccountWithLink.Account.Id
	retval.ApplicationFamilyId = v.AccountWithLink.Account.ApplicationFamilyId
	retval.ArchivedAt = v.AccountWithLink.Account.ArchivedAt
	retval.Branch = v.AccountWithLink.Account.Branch
	retval.Category = v.AccountWithLink.Account.Category
	retval.ClosedAt = v.AccountWithLink.Account.ClosedAt
	retval.CreatedAt = v.AccountWithLink.Account.CreatedAt
	retval.CacheExpiredAt = v.AccountWithLink.Account.CacheExpiredAt
	retval.Currency = v.AccountWithLink.Account.Currency
	retval.RequiredIdentityVerification = v.AccountWithLink.Account.RequiredIdentityVerification
	retval.UnifiedAccountType = v.AccountWithLink.Account.UnifiedAccountType
	retval.UpdatedAt = v.AccountWithLink.Account.UpdatedAt
	retval.Nickname = v.AccountWithLink.Account.Nickname
	retval.Status = v.AccountWithLink.Account.Status
	retval.AccountOwnerConfiguration = v.AccountWithLink.Account.AccountOwnerConfiguration
	retval.AccountFeatures = v.AccountWithLink.Account.AccountFeatures
	retval.AccountOwners = v.AccountWithLink.Account.AccountOwners
	retval.Type = v.AccountWithLink.Account.Type
	return &retval, nil
}

// AllAccountsAccountsAccountConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type AllAccountsAccountsAccountConnectionPageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   string  `json:"endCursor"`
	Typename    *string `json:"__typename"`
}

// GetHasNextPage returns AllAccountsAccountsAccountConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionPageInfo) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns AllAccountsAccountsAccountConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionPageInfo) GetEndCursor() string { return v.EndCursor }

// GetTypename returns AllAccountsAccountsAccountConnectionPageInfo.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountsAccountsAccountConnectionPageInfo) GetTypename() *string { return v.Typename }

// FetchActivityListActivitiesActivitiesConnection includes the requested fields of the GraphQL type ActivitiesConnection.
type FetchActivityListActivitiesActivitiesConnection struct {
	Edges    []FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge `json:"edges"`
	PageInfo FetchActivityListActivitiesActivitiesConnectionPageInfo              `json:"pageInfo"`
	Typename *string                                                              `json:"__typename"`
}

// GetEdges returns FetchActivityListActivitiesActivitiesConnection.Edges, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnection) GetEdges() []FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge {
	return v.Edges
}

// GetPageInfo returns FetchActivityListActivitiesActivitiesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnection) GetPageInfo() FetchActivityListActivitiesActivitiesConnectionPageInfo {
	return v.PageInfo
}

// GetTypename returns FetchActivityListActivitiesActivitiesConnection.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnection) GetTypename() *string { return v.Typename }

// FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge includes the requested fields of the GraphQL type ActivitiesEdge.
type FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge struct {
	Node     FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem `json:"node"`
	Typename *string                                                                                `json:"__typename"`
}

// GetNode returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge.Node, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge) GetNode() FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem {
	return v.Node
}

// GetTypename returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdge) GetTypename() *string {
	return v.Typename
}

// FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem includes the requested fields of the GraphQL type ActivityFeedItem.
type FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem struct {
	Activity `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetTypename() *string {
	return v.Typename
}

// GetAccountId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AccountId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAccountId() string {
	return v.Activity.AccountId
}

// GetAftOriginatorName returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AftOriginatorName, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAftOriginatorName() *string {
	return v.Activity.AftOriginatorName
}

// GetAftTransactionCategory returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AftTransactionCategory, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAftTransactionCategory() *string {
	return v.Activity.AftTransactionCategory
}

// GetAftTransactionType returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AftTransactionType, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAftTransactionType() *string {
	return v.Activity.AftTransactionType
}

// GetAmount returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Amount, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAmount() string {
	return v.Activity.Amount
}

// GetAmountSign returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AmountSign, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAmountSign() string {
	return v.Activity.AmountSign
}

// GetAssetQuantity returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AssetQuantity, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAssetQuantity() *string {
	return v.Activity.AssetQuantity
}

// GetAssetSymbol returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.AssetSymbol, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetAssetSymbol() *string {
	return v.Activity.AssetSymbol
}

// GetCanonicalId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.CanonicalId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetCanonicalId() *string {
	return v.Activity.CanonicalId
}

// GetCurrency returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Currency, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetCurrency() *string {
	return v.Activity.Currency
}

// GetETransferEmail returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ETransferEmail, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetETransferEmail() *string {
	return v.Activity.ETransferEmail
}

// GetETransferName returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ETransferName, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetETransferName() *string {
	return v.Activity.ETransferName
}

// GetExternalCanonicalId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ExternalCanonicalId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetExternalCanonicalId() *string {
	return v.Activity.ExternalCanonicalId
}

// GetIdentityId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.IdentityId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetIdentityId() string {
	return v.Activity.IdentityId
}

// GetInstitutionName returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.InstitutionName, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetInstitutionName() *string {
	return v.Activity.InstitutionName
}

// GetOccurredAt returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.OccurredAt, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetOccurredAt() time.Time {
	return v.Activity.OccurredAt
}

// GetP2pHandle returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.P2pHandle, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetP2pHandle() *string {
	return v.Activity.P2pHandle
}

// GetP2pMessage returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.P2pMessage, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetP2pMessage() *string {
	return v.Activity.P2pMessage
}

// GetSpendMerchant returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.SpendMerchant, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetSpendMerchant() *string {
	return v.Activity.SpendMerchant
}

// GetSecurityId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.SecurityId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetSecurityId() *string {
	return v.Activity.SecurityId
}

// GetBillPayCompanyName returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.BillPayCompanyName, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetBillPayCompanyName() *string {
	return v.Activity.BillPayCompanyName
}

// GetBillPayPayeeNickname returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.BillPayPayeeNickname, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetBillPayPayeeNickname() *string {
	return v.Activity.BillPayPayeeNickname
}

// GetRedactedExternalAccountNumber returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.RedactedExternalAccountNumber, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetRedactedExternalAccountNumber() *string {
	return v.Activity.RedactedExternalAccountNumber
}

// GetOpposingAccountId returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.OpposingAccountId, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetOpposingAccountId() *string {
	return v.Activity.OpposingAccountId
}

// GetStatus returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Status, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetStatus() *string {
	return v.Activity.Status
}

// GetSubType returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.SubType, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetSubType() *string {
	return v.Activity.SubType
}

// GetType returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Type, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetType() string {
	return v.Activity.Type
}

// GetStrikePrice returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.StrikePrice, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetStrikePrice() *string {
	return v.Activity.StrikePrice
}

// GetContractType returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ContractType, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetContractType() *string {
	return v.Activity.ContractType
}

// GetExpiryDate returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ExpiryDate, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetExpiryDate() *string {
	return v.Activity.ExpiryDate
}

// GetChequeNumber returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ChequeNumber, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetChequeNumber() *string {
	return v.Activity.ChequeNumber
}

// GetProvisionalCreditAmount returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.ProvisionalCreditAmount, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetProvisionalCreditAmount() *string {
	return v.Activity.ProvisionalCreditAmount
}

// GetPrimaryBlocker returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.PrimaryBlocker, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetPrimaryBlocker() *string {
	return v.Activity.PrimaryBlocker
}

// GetInterestRate returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.InterestRate, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetInterestRate() *string {
	return v.Activity.InterestRate
}

// GetFrequency returns FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Frequency, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) GetFrequency() *string {
	return v.Activity.Frequency
}

func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem
		graphql.NoUnmarshalJSON
	}
	firstPass.FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Activity)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem struct {
	Typename *string `json:"__typename"`

	AccountId string `json:"accountId"`

	AftOriginatorName *string `json:"aftOriginatorName"`

	AftTransactionCategory *string `json:"aftTransactionCategory"`

	AftTransactionType *string `json:"aftTransactionType"`

	Amount string `json:"amount"`

	AmountSign string `json:"amountSign"`

	AssetQuantity *string `json:"assetQuantity"`

	AssetSymbol *string `json:"assetSymbol"`

	CanonicalId *string `json:"canonicalId"`

	Currency *string `json:"currency"`

	ETransferEmail *string `json:"eTransferEmail"`

	ETransferName *string `json:"eTransferName"`

	ExternalCanonicalId *string `json:"externalCanonicalId"`

	IdentityId string `json:"identityId"`

	InstitutionName *string `json:"institutionName"`

	OccurredAt json.RawMessage `json:"occurredAt"`

	P2pHandle *string `json:"p2pHandle"`

	P2pMessage *string `json:"p2pMessage"`

	SpendMerchant *string `json:"spendMerchant"`

	SecurityId *string `json:"securityId"`

	BillPayCompanyName *string `json:"billPayCompanyName"`

	BillPayPayeeNickname *string `json:"billPayPayeeNickname"`

	RedactedExternalAccountNumber *string `json:"redactedExternalAccountNumber"`

	OpposingAccountId *string `json:"opposingAccountId"`

	Status *string `json:"status"`

	SubType *string `json:"subType"`

	Type string `json:"type"`

	StrikePrice *string `json:"strikePrice"`

	ContractType *string `json:"contractType"`

	ExpiryDate *string `json:"expiryDate"`

	ChequeNumber *string `json:"chequeNumber"`

	ProvisionalCreditAmount *string `json:"provisionalCreditAmount"`

	PrimaryBlocker *string `json:"primaryBlocker"`

	InterestRate *string `json:"interestRate"`

	Frequency *string `json:"frequency"`
}

func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem) __premarshalJSON() (*__premarshalFetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem, error) {
	var retval __premarshalFetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem

	retval.Typename = v.Typename
	retval.AccountId = v.Activity.AccountId
	retval.AftOriginatorName = v.Activity.AftOriginatorName
	retval.AftTransactionCategory = v.Activity.AftTransactionCategory
	retval.AftTransactionType = v.Activity.AftTransactionType
	retval.Amount = v.Activity.Amount
	retval.AmountSign = v.Activity.AmountSign
	retval.AssetQuantity = v.Activity.AssetQuantity
	retval.AssetSymbol = v.Activity.AssetSymbol
	retval.CanonicalId = v.Activity.CanonicalId
	retval.Currency = v.Activity.Currency
	retval.ETransferEmail = v.Activity.ETransferEmail
	retval.ETransferName = v.Activity.ETransferName
	retval.ExternalCanonicalId = v.Activity.ExternalCanonicalId
	retval.IdentityId = v.Activity.IdentityId
	retval.InstitutionName = v.Activity.InstitutionName
	{

		dst := &retval.OccurredAt
		src := v.Activity.OccurredAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal FetchActivityListActivitiesActivitiesConnectionEdgesActivitiesEdgeNodeActivityFeedItem.Activity.OccurredAt: %w", err)
		}
	}
	retval.P2pHandle = v.Activity.P2pHandle
	retval.P2pMessage = v.Activity.P2pMessage
	retval.SpendMerchant = v.Activity.SpendMerchant
	retval.SecurityId = v.Activity.SecurityId
	retval.BillPayCompanyName = v.Activity.BillPayCompanyName
	retval.BillPayPayeeNickname = v.Activity.BillPayPayeeNickname
	retval.RedactedExternalAccountNumber = v.Activity.RedactedExternalAccountNumber
	retval.OpposingAccountId = v.Activity.OpposingAccountId
	retval.Status = v.Activity.Status
	retval.SubType = v.Activity.SubType
	retval.Type = v.Activity.Type
	retval.StrikePrice = v.Activity.StrikePrice
	retval.ContractType = v.Activity.ContractType
	retval.ExpiryDate = v.Activity.ExpiryDate
	retval.ChequeNumber = v.Activity.ChequeNumber
	retval.ProvisionalCreditAmount = v.Activity.ProvisionalCreditAmount
	retval.PrimaryBlocker = v.Activity.PrimaryBlocker
	retval.InterestRate = v.Activity.InterestRate
	retval.Frequency = v.Activity.Frequency
	return &retval, nil
}

// FetchActivityListActivitiesActivitiesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type FetchActivityListActivitiesActivitiesConnectionPageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   string  `json:"endCursor"`
	Typename    *string `json:"__typename"`
}

// GetHasNextPage returns FetchActivityListActivitiesActivitiesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns FetchActivityListActivitiesActivitiesConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetTypename returns FetchActivityListActivitiesActivitiesConnectionPageInfo.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityListActivitiesActivitiesConnectionPageInfo) GetTypename() *string {
	return v.Typename
}

// FetchActivityListResponse is returned by FetchActivityList on success.
type FetchActivityListResponse struct {
	Activities *FetchActivityListActivitiesActivitiesConnection `json:"activities"`
}

// GetActivities returns FetchActivityListResponse.Activities, and is useful for accessing the field via an interface.
func (v *FetchActivityListResponse) GetActivities() *FetchActivityListActivitiesActivitiesConnection {
	return v.Activities
}

// FetchAllAccountsIdentity includes the requested fields of the GraphQL type Identity.
type FetchAllAccountsIdentity struct {
	Id          string `json:"id"`
	AllAccounts `json:"-"`
	Typename    *string `json:"__typename"`
}

// GetId returns FetchAllAccountsIdentity.Id, and is useful for accessing the field via an interface.
func (v *FetchAllAccountsIdentity) GetId() string { return v.Id }

// GetTypename returns FetchAllAccountsIdentity.Typename, and is useful for accessing the field via an interface.
func (v *FetchAllAccountsIdentity) GetTypename() *string { return v.Typename }

// GetAccounts returns FetchAllAccountsIdentity.Accounts, and is useful for accessing the field via an interface.
func (v *FetchAllAccountsIdentity) GetAccounts() AllAccountsAccountsAccountConnection {
	return v.AllAccounts.Accounts
}

func (v *FetchAllAccountsIdentity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FetchAllAccountsIdentity
		graphql.NoUnmarshalJSON
	}
	firstPass.FetchAllAccountsIdentity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllAccounts)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFetchAllAccountsIdentity struct {
	Id string `json:"id"`

	Typename *string `json:"__typename"`

	Accounts AllAccountsAccountsAccountConnection `json:"accounts"`
}

func (v *FetchAllAccountsIdentity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FetchAllAccountsIdentity) __premarshalJSON() (*__premarshalFetchAllAccountsIdentity, error) {
	var retval __premarshalFetchAllAccountsIdentity

	retval.Id = v.Id
	retval.Typename = v.Typename
	retval.Accounts = v.AllAccounts.Accounts
	return &retval, nil
}

// FetchAllAccountsResponse is returned by FetchAllAccounts on success.
type FetchAllAccountsResponse struct {
	Identity FetchAllAccountsIdentity `json:"identity"`
}

// GetIdentity returns FetchAllAccountsResponse.Identity, and is useful for accessing the field via an interface.
func (v *FetchAllAccountsResponse) GetIdentity() FetchAllAccountsIdentity { return v.Identity }

// __FetchActivityListInput is used internally by genqlient
type __FetchActivityListInput struct {
	First      int        `json:"first"`
	Cursor     *string    `json:"cursor"`
	AccountIds []string   `json:"accountIds"`
	EndDate    *time.Time `json:"-"`
	StartDate  time.Time  `json:"-"`
}

// GetFirst returns __FetchActivityListInput.First, and is useful for accessing the field via an interface.
func (v *__FetchActivityListInput) GetFirst() int { return v.First }

// GetCursor returns __FetchActivityListInput.Cursor, and is useful for accessing the field via an interface.
func (v *__FetchActivityListInput) GetCursor() *string { return v.Cursor }

// GetAccountIds returns __FetchActivityListInput.AccountIds, and is useful for accessing the field via an interface.
func (v *__FetchActivityListInput) GetAccountIds() []string { return v.AccountIds }

// GetEndDate returns __FetchActivityListInput.EndDate, and is useful for accessing the field via an interface.
func (v *__FetchActivityListInput) GetEndDate() *time.Time { return v.EndDate }

// GetStartDate returns __FetchActivityListInput.StartDate, and is useful for accessing the field via an interface.
func (v *__FetchActivityListInput) GetStartDate() time.Time { return v.StartDate }

func (v *__FetchActivityListInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__FetchActivityListInput
		EndDate   json.RawMessage `json:"endDate"`
		StartDate json.RawMessage `json:"startDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__FetchActivityListInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.EndDate
		src := firstPass.EndDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = json.Unmarshal(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FetchActivityListInput.EndDate: %w", err)
			}
		}
	}

	{
		dst := &v.StartDate
		src := firstPass.StartDate
		if len(src) != 0 && string(src) != "null" {
			err = json.Unmarshal(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FetchActivityListInput.StartDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__FetchActivityListInput struct {
	First int `json:"first"`

	Cursor *string `json:"cursor"`

	AccountIds []string `json:"accountIds"`

	EndDate json.RawMessage `json:"endDate"`

	StartDate json.RawMessage `json:"startDate"`
}

func (v *__FetchActivityListInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__FetchActivityListInput) __premarshalJSON() (*__premarshal__FetchActivityListInput, error) {
	var retval __premarshal__FetchActivityListInput

	retval.First = v.First
	retval.Cursor = v.Cursor
	retval.AccountIds = v.AccountIds
	{

		dst := &retval.EndDate
		src := v.EndDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal __FetchActivityListInput.EndDate: %w", err)
			}
		}
	}
	{

		dst := &retval.StartDate
		src := v.StartDate
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal __FetchActivityListInput.StartDate: %w", err)
		}
	}
	return &retval, nil
}

// __FetchAllAccountsInput is used internally by genqlient
type __FetchAllAccountsInput struct {
	IdentityId string  `json:"identityId"`
	PageSize   int     `json:"pageSize"`
	Cursor     *string `json:"cursor"`
}

// GetIdentityId returns __FetchAllAccountsInput.IdentityId, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountsInput) GetIdentityId() string { return v.IdentityId }

// GetPageSize returns __FetchAllAccountsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountsInput) GetPageSize() int { return v.PageSize }

// GetCursor returns __FetchAllAccountsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountsInput) GetCursor() *string { return v.Cursor }

// The query or mutation executed by FetchActivityList.
const FetchActivityList_Operation = `
query FetchActivityList ($first: Int!, $cursor: Cursor, $accountIds: [String!], $endDate: Datetime, $startDate: Datetime!) {
	activities(first: $first, after: $cursor, accountIds: $accountIds, endDate: $endDate, startDate: $startDate) {
		edges {
			node {
				... Activity
				__typename
			}
			__typename
		}
		pageInfo {
			hasNextPage
			endCursor
			__typename
		}
		__typename
	}
}
fragment Activity on ActivityFeedItem {
	accountId
	aftOriginatorName
	aftTransactionCategory
	aftTransactionType
	amount
	amountSign
	assetQuantity
	assetSymbol
	canonicalId
	currency
	eTransferEmail
	eTransferName
	externalCanonicalId
	identityId
	institutionName
	occurredAt
	p2pHandle
	p2pMessage
	spendMerchant
	securityId
	billPayCompanyName
	billPayPayeeNickname
	redactedExternalAccountNumber
	opposingAccountId
	status
	subType
	type
	strikePrice
	contractType
	expiryDate
	chequeNumber
	provisionalCreditAmount
	primaryBlocker
	interestRate
	frequency
	__typename
}
`

func FetchActivityList(
	ctx_ context.Context,
	client_ graphql.Client,
	first int,
	cursor *string,
	accountIds []string,
	endDate *time.Time,
	startDate time.Time,
) (*FetchActivityListResponse, error) {
	req_ := &graphql.Request{
		OpName: "FetchActivityList",
		Query:  FetchActivityList_Operation,
		Variables: &__FetchActivityListInput{
			First:      first,
			Cursor:     cursor,
			AccountIds: accountIds,
			EndDate:    endDate,
			StartDate:  startDate,
		},
	}
	var err_ error

	var data_ FetchActivityListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FetchAllAccounts.
const FetchAllAccounts_Operation = `
query FetchAllAccounts ($identityId: ID!, $pageSize: Int!, $cursor: String) {
	identity(id: $identityId) {
		id
		... AllAccounts
		__typename
	}
}
fragment AllAccounts on Identity {
	accounts(filter: {}, first: $pageSize, after: $cursor) {
		pageInfo {
			hasNextPage
			endCursor
			__typename
		}
		edges {
			cursor
			node {
				... AccountWithLink
				__typename
			}
			__typename
		}
		__typename
	}
	__typename
}
fragment AccountWithLink on Account {
	... Account
	linkedAccount {
		... Account
		__typename
	}
	__typename
}
fragment Account on Account {
	id
	applicationFamilyId
	archivedAt
	branch
	category
	closedAt
	createdAt
	cacheExpiredAt
	currency
	requiredIdentityVerification
	unifiedAccountType
	updatedAt
	nickname
	status
	accountOwnerConfiguration
	accountFeatures {
		... AccountFeature
		__typename
	}
	accountOwners {
		... AccountOwner
		__typename
	}
	type
	__typename
}
fragment AccountFeature on AccountFeature {
	name
	enabled
	__typename
}
fragment AccountOwner on AccountOwner {
	accountId
	identityId
	accountNickname
	clientCanonicalId
	accountOpeningAgreementsSigned
	name
	email
	ownershipType
	__typename
}
`

func FetchAllAccounts(
	ctx_ context.Context,
	client_ graphql.Client,
	identityId string,
	pageSize int,
	cursor *string,
) (*FetchAllAccountsResponse, error) {
	req_ := &graphql.Request{
		OpName: "FetchAllAccounts",
		Query:  FetchAllAccounts_Operation,
		Variables: &__FetchAllAccountsInput{
			IdentityId: identityId,
			PageSize:   pageSize,
			Cursor:     cursor,
		},
	}
	var err_ error

	var data_ FetchAllAccountsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
