// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package generated

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/vpineda1996/wsfetch/internal/marshalling"
)

// Account includes the GraphQL fields of Account requested by the fragment Account.
type Account struct {
	AccountCore       `json:"-"`
	CustodianAccounts []AccountCustodianAccountsCustodianAccount `json:"custodianAccounts"`
	Typename          *string                                    `json:"__typename"`
}

// GetCustodianAccounts returns Account.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *Account) GetCustodianAccounts() []AccountCustodianAccountsCustodianAccount {
	return v.CustodianAccounts
}

// GetTypename returns Account.Typename, and is useful for accessing the field via an interface.
func (v *Account) GetTypename() *string { return v.Typename }

// GetId returns Account.Id, and is useful for accessing the field via an interface.
func (v *Account) GetId() string { return v.AccountCore.Id }

// GetArchivedAt returns Account.ArchivedAt, and is useful for accessing the field via an interface.
func (v *Account) GetArchivedAt() *time.Time { return v.AccountCore.ArchivedAt }

// GetBranch returns Account.Branch, and is useful for accessing the field via an interface.
func (v *Account) GetBranch() *string { return v.AccountCore.Branch }

// GetClosedAt returns Account.ClosedAt, and is useful for accessing the field via an interface.
func (v *Account) GetClosedAt() *time.Time { return v.AccountCore.ClosedAt }

// GetCreatedAt returns Account.CreatedAt, and is useful for accessing the field via an interface.
func (v *Account) GetCreatedAt() time.Time { return v.AccountCore.CreatedAt }

// GetCacheExpiredAt returns Account.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *Account) GetCacheExpiredAt() *time.Time { return v.AccountCore.CacheExpiredAt }

// GetCurrency returns Account.Currency, and is useful for accessing the field via an interface.
func (v *Account) GetCurrency() *string { return v.AccountCore.Currency }

// GetRequiredIdentityVerification returns Account.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *Account) GetRequiredIdentityVerification() *string {
	return v.AccountCore.RequiredIdentityVerification
}

// GetUnifiedAccountType returns Account.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *Account) GetUnifiedAccountType() *string { return v.AccountCore.UnifiedAccountType }

// GetSupportedCurrencies returns Account.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *Account) GetSupportedCurrencies() []string { return v.AccountCore.SupportedCurrencies }

// GetNickname returns Account.Nickname, and is useful for accessing the field via an interface.
func (v *Account) GetNickname() *string { return v.AccountCore.Nickname }

// GetStatus returns Account.Status, and is useful for accessing the field via an interface.
func (v *Account) GetStatus() string { return v.AccountCore.Status }

// GetAccountOwnerConfiguration returns Account.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *Account) GetAccountOwnerConfiguration() *string {
	return v.AccountCore.AccountOwnerConfiguration
}

// GetAccountFeatures returns Account.AccountFeatures, and is useful for accessing the field via an interface.
func (v *Account) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.AccountCore.AccountFeatures
}

// GetAccountOwners returns Account.AccountOwners, and is useful for accessing the field via an interface.
func (v *Account) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.AccountCore.AccountOwners
}

// GetType returns Account.Type, and is useful for accessing the field via an interface.
func (v *Account) GetType() *string { return v.AccountCore.Type }

func (v *Account) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Account
		graphql.NoUnmarshalJSON
	}
	firstPass.Account = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccount struct {
	CustodianAccounts []AccountCustodianAccountsCustodianAccount `json:"custodianAccounts"`

	Typename *string `json:"__typename"`

	Id string `json:"id"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`
}

func (v *Account) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Account) __premarshalJSON() (*__premarshalAccount, error) {
	var retval __premarshalAccount

	retval.CustodianAccounts = v.CustodianAccounts
	retval.Typename = v.Typename
	retval.Id = v.AccountCore.Id
	{

		dst := &retval.ArchivedAt
		src := v.AccountCore.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal Account.AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.AccountCore.Branch
	{

		dst := &retval.ClosedAt
		src := v.AccountCore.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal Account.AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.AccountCore.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Account.AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.AccountCore.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal Account.AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.AccountCore.Currency
	retval.RequiredIdentityVerification = v.AccountCore.RequiredIdentityVerification
	retval.UnifiedAccountType = v.AccountCore.UnifiedAccountType
	retval.SupportedCurrencies = v.AccountCore.SupportedCurrencies
	retval.Nickname = v.AccountCore.Nickname
	retval.Status = v.AccountCore.Status
	retval.AccountOwnerConfiguration = v.AccountCore.AccountOwnerConfiguration
	retval.AccountFeatures = v.AccountCore.AccountFeatures
	retval.AccountOwners = v.AccountCore.AccountOwners
	retval.Type = v.AccountCore.Type
	return &retval, nil
}

// AccountCore includes the GraphQL fields of Account requested by the fragment AccountCore.
type AccountCore struct {
	Id                           string                                     `json:"id"`
	ArchivedAt                   *time.Time                                 `json:"-"`
	Branch                       *string                                    `json:"branch"`
	ClosedAt                     *time.Time                                 `json:"-"`
	CreatedAt                    time.Time                                  `json:"-"`
	CacheExpiredAt               *time.Time                                 `json:"-"`
	Currency                     *string                                    `json:"currency"`
	RequiredIdentityVerification *string                                    `json:"requiredIdentityVerification"`
	UnifiedAccountType           *string                                    `json:"unifiedAccountType"`
	SupportedCurrencies          []string                                   `json:"supportedCurrencies"`
	Nickname                     *string                                    `json:"nickname"`
	Status                       string                                     `json:"status"`
	AccountOwnerConfiguration    *string                                    `json:"accountOwnerConfiguration"`
	AccountFeatures              []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`
	AccountOwners                []AccountCoreAccountOwnersAccountOwner     `json:"accountOwners"`
	Type                         *string                                    `json:"type"`
	Typename                     *string                                    `json:"__typename"`
}

// GetId returns AccountCore.Id, and is useful for accessing the field via an interface.
func (v *AccountCore) GetId() string { return v.Id }

// GetArchivedAt returns AccountCore.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountCore) GetArchivedAt() *time.Time { return v.ArchivedAt }

// GetBranch returns AccountCore.Branch, and is useful for accessing the field via an interface.
func (v *AccountCore) GetBranch() *string { return v.Branch }

// GetClosedAt returns AccountCore.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountCore) GetClosedAt() *time.Time { return v.ClosedAt }

// GetCreatedAt returns AccountCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetCacheExpiredAt returns AccountCore.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountCore) GetCacheExpiredAt() *time.Time { return v.CacheExpiredAt }

// GetCurrency returns AccountCore.Currency, and is useful for accessing the field via an interface.
func (v *AccountCore) GetCurrency() *string { return v.Currency }

// GetRequiredIdentityVerification returns AccountCore.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountCore) GetRequiredIdentityVerification() *string {
	return v.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountCore.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountCore) GetUnifiedAccountType() *string { return v.UnifiedAccountType }

// GetSupportedCurrencies returns AccountCore.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *AccountCore) GetSupportedCurrencies() []string { return v.SupportedCurrencies }

// GetNickname returns AccountCore.Nickname, and is useful for accessing the field via an interface.
func (v *AccountCore) GetNickname() *string { return v.Nickname }

// GetStatus returns AccountCore.Status, and is useful for accessing the field via an interface.
func (v *AccountCore) GetStatus() string { return v.Status }

// GetAccountOwnerConfiguration returns AccountCore.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountCore) GetAccountOwnerConfiguration() *string { return v.AccountOwnerConfiguration }

// GetAccountFeatures returns AccountCore.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountCore) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.AccountFeatures
}

// GetAccountOwners returns AccountCore.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountCore) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.AccountOwners
}

// GetType returns AccountCore.Type, and is useful for accessing the field via an interface.
func (v *AccountCore) GetType() *string { return v.Type }

// GetTypename returns AccountCore.Typename, and is useful for accessing the field via an interface.
func (v *AccountCore) GetTypename() *string { return v.Typename }

func (v *AccountCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCore
		ArchivedAt     json.RawMessage `json:"archivedAt"`
		ClosedAt       json.RawMessage `json:"closedAt"`
		CreatedAt      json.RawMessage `json:"createdAt"`
		CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ArchivedAt
		src := firstPass.ArchivedAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccountCore.ArchivedAt: %w", err)
			}
		}
	}

	{
		dst := &v.ClosedAt
		src := firstPass.ClosedAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccountCore.ClosedAt: %w", err)
			}
		}
	}

	{
		dst := &v.CreatedAt
		src := firstPass.CreatedAt
		if len(src) != 0 && string(src) != "null" {
			err = marshalling.UnmarshalStringToDateTime(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccountCore.CreatedAt: %w", err)
			}
		}
	}

	{
		dst := &v.CacheExpiredAt
		src := firstPass.CacheExpiredAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccountCore struct {
	Id string `json:"id"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`

	Typename *string `json:"__typename"`
}

func (v *AccountCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCore) __premarshalJSON() (*__premarshalAccountCore, error) {
	var retval __premarshalAccountCore

	retval.Id = v.Id
	{

		dst := &retval.ArchivedAt
		src := v.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.Branch
	{

		dst := &retval.ClosedAt
		src := v.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.Currency
	retval.RequiredIdentityVerification = v.RequiredIdentityVerification
	retval.UnifiedAccountType = v.UnifiedAccountType
	retval.SupportedCurrencies = v.SupportedCurrencies
	retval.Nickname = v.Nickname
	retval.Status = v.Status
	retval.AccountOwnerConfiguration = v.AccountOwnerConfiguration
	retval.AccountFeatures = v.AccountFeatures
	retval.AccountOwners = v.AccountOwners
	retval.Type = v.Type
	retval.Typename = v.Typename
	return &retval, nil
}

// AccountCoreAccountFeaturesAccountFeature includes the requested fields of the GraphQL type AccountFeature.
type AccountCoreAccountFeaturesAccountFeature struct {
	AccountFeature `json:"-"`
	Typename       *string `json:"__typename"`
}

// GetTypename returns AccountCoreAccountFeaturesAccountFeature.Typename, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountFeaturesAccountFeature) GetTypename() *string { return v.Typename }

// GetName returns AccountCoreAccountFeaturesAccountFeature.Name, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountFeaturesAccountFeature) GetName() string { return v.AccountFeature.Name }

// GetEnabled returns AccountCoreAccountFeaturesAccountFeature.Enabled, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountFeaturesAccountFeature) GetEnabled() bool { return v.AccountFeature.Enabled }

func (v *AccountCoreAccountFeaturesAccountFeature) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCoreAccountFeaturesAccountFeature
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCoreAccountFeaturesAccountFeature = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountFeature)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCoreAccountFeaturesAccountFeature struct {
	Typename *string `json:"__typename"`

	Name string `json:"name"`

	Enabled bool `json:"enabled"`
}

func (v *AccountCoreAccountFeaturesAccountFeature) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCoreAccountFeaturesAccountFeature) __premarshalJSON() (*__premarshalAccountCoreAccountFeaturesAccountFeature, error) {
	var retval __premarshalAccountCoreAccountFeaturesAccountFeature

	retval.Typename = v.Typename
	retval.Name = v.AccountFeature.Name
	retval.Enabled = v.AccountFeature.Enabled
	return &retval, nil
}

// AccountCoreAccountOwnersAccountOwner includes the requested fields of the GraphQL type AccountOwner.
type AccountCoreAccountOwnersAccountOwner struct {
	AccountOwner `json:"-"`
	Typename     *string `json:"__typename"`
}

// GetTypename returns AccountCoreAccountOwnersAccountOwner.Typename, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetTypename() *string { return v.Typename }

// GetAccountId returns AccountCoreAccountOwnersAccountOwner.AccountId, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetAccountId() string { return v.AccountOwner.AccountId }

// GetIdentityId returns AccountCoreAccountOwnersAccountOwner.IdentityId, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetIdentityId() string {
	return v.AccountOwner.IdentityId
}

// GetAccountNickname returns AccountCoreAccountOwnersAccountOwner.AccountNickname, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetAccountNickname() *string {
	return v.AccountOwner.AccountNickname
}

// GetClientCanonicalId returns AccountCoreAccountOwnersAccountOwner.ClientCanonicalId, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetClientCanonicalId() string {
	return v.AccountOwner.ClientCanonicalId
}

// GetAccountOpeningAgreementsSigned returns AccountCoreAccountOwnersAccountOwner.AccountOpeningAgreementsSigned, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetAccountOpeningAgreementsSigned() *bool {
	return v.AccountOwner.AccountOpeningAgreementsSigned
}

// GetName returns AccountCoreAccountOwnersAccountOwner.Name, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetName() string { return v.AccountOwner.Name }

// GetEmail returns AccountCoreAccountOwnersAccountOwner.Email, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetEmail() string { return v.AccountOwner.Email }

// GetOwnershipType returns AccountCoreAccountOwnersAccountOwner.OwnershipType, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetOwnershipType() string {
	return v.AccountOwner.OwnershipType
}

// GetActiveInvitation returns AccountCoreAccountOwnersAccountOwner.ActiveInvitation, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetActiveInvitation() []AccountOwnerActiveInvitationAccountOwnerInvitation {
	return v.AccountOwner.ActiveInvitation
}

// GetSentInvitations returns AccountCoreAccountOwnersAccountOwner.SentInvitations, and is useful for accessing the field via an interface.
func (v *AccountCoreAccountOwnersAccountOwner) GetSentInvitations() []AccountOwnerSentInvitationsAccountOwnerInvitation {
	return v.AccountOwner.SentInvitations
}

func (v *AccountCoreAccountOwnersAccountOwner) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCoreAccountOwnersAccountOwner
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCoreAccountOwnersAccountOwner = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountOwner)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCoreAccountOwnersAccountOwner struct {
	Typename *string `json:"__typename"`

	AccountId string `json:"accountId"`

	IdentityId string `json:"identityId"`

	AccountNickname *string `json:"accountNickname"`

	ClientCanonicalId string `json:"clientCanonicalId"`

	AccountOpeningAgreementsSigned *bool `json:"accountOpeningAgreementsSigned"`

	Name string `json:"name"`

	Email string `json:"email"`

	OwnershipType string `json:"ownershipType"`

	ActiveInvitation []AccountOwnerActiveInvitationAccountOwnerInvitation `json:"activeInvitation"`

	SentInvitations []AccountOwnerSentInvitationsAccountOwnerInvitation `json:"sentInvitations"`
}

func (v *AccountCoreAccountOwnersAccountOwner) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCoreAccountOwnersAccountOwner) __premarshalJSON() (*__premarshalAccountCoreAccountOwnersAccountOwner, error) {
	var retval __premarshalAccountCoreAccountOwnersAccountOwner

	retval.Typename = v.Typename
	retval.AccountId = v.AccountOwner.AccountId
	retval.IdentityId = v.AccountOwner.IdentityId
	retval.AccountNickname = v.AccountOwner.AccountNickname
	retval.ClientCanonicalId = v.AccountOwner.ClientCanonicalId
	retval.AccountOpeningAgreementsSigned = v.AccountOwner.AccountOpeningAgreementsSigned
	retval.Name = v.AccountOwner.Name
	retval.Email = v.AccountOwner.Email
	retval.OwnershipType = v.AccountOwner.OwnershipType
	retval.ActiveInvitation = v.AccountOwner.ActiveInvitation
	retval.SentInvitations = v.AccountOwner.SentInvitations
	return &retval, nil
}

// AccountCurrentFinancials includes the GraphQL fields of AccountCurrentFinancials requested by the fragment AccountCurrentFinancials.
type AccountCurrentFinancials struct {
	Id                    string                                              `json:"id"`
	NetLiquidationValueV2 *AccountCurrentFinancialsNetLiquidationValueV2Money `json:"netLiquidationValueV2"`
	NetDeposits           *AccountCurrentFinancialsNetDepositsMoney           `json:"netDeposits"`
	SimpleReturns         *AccountCurrentFinancialsSimpleReturns              `json:"simpleReturns"`
	TotalDeposits         *AccountCurrentFinancialsTotalDepositsMoney         `json:"totalDeposits"`
	TotalWithdrawals      *AccountCurrentFinancialsTotalWithdrawalsMoney      `json:"totalWithdrawals"`
	Typename              *string                                             `json:"__typename"`
}

// GetId returns AccountCurrentFinancials.Id, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetId() string { return v.Id }

// GetNetLiquidationValueV2 returns AccountCurrentFinancials.NetLiquidationValueV2, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetNetLiquidationValueV2() *AccountCurrentFinancialsNetLiquidationValueV2Money {
	return v.NetLiquidationValueV2
}

// GetNetDeposits returns AccountCurrentFinancials.NetDeposits, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetNetDeposits() *AccountCurrentFinancialsNetDepositsMoney {
	return v.NetDeposits
}

// GetSimpleReturns returns AccountCurrentFinancials.SimpleReturns, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetSimpleReturns() *AccountCurrentFinancialsSimpleReturns {
	return v.SimpleReturns
}

// GetTotalDeposits returns AccountCurrentFinancials.TotalDeposits, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetTotalDeposits() *AccountCurrentFinancialsTotalDepositsMoney {
	return v.TotalDeposits
}

// GetTotalWithdrawals returns AccountCurrentFinancials.TotalWithdrawals, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetTotalWithdrawals() *AccountCurrentFinancialsTotalWithdrawalsMoney {
	return v.TotalWithdrawals
}

// GetTypename returns AccountCurrentFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancials) GetTypename() *string { return v.Typename }

// AccountCurrentFinancialsNetDepositsMoney includes the requested fields of the GraphQL type Money.
type AccountCurrentFinancialsNetDepositsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountCurrentFinancialsNetDepositsMoney.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetDepositsMoney) GetTypename() *string { return v.Typename }

// GetAmount returns AccountCurrentFinancialsNetDepositsMoney.Amount, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetDepositsMoney) GetAmount() string { return v.Money.Amount }

// GetCents returns AccountCurrentFinancialsNetDepositsMoney.Cents, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetDepositsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns AccountCurrentFinancialsNetDepositsMoney.Currency, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetDepositsMoney) GetCurrency() string { return v.Money.Currency }

func (v *AccountCurrentFinancialsNetDepositsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCurrentFinancialsNetDepositsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCurrentFinancialsNetDepositsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCurrentFinancialsNetDepositsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *AccountCurrentFinancialsNetDepositsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCurrentFinancialsNetDepositsMoney) __premarshalJSON() (*__premarshalAccountCurrentFinancialsNetDepositsMoney, error) {
	var retval __premarshalAccountCurrentFinancialsNetDepositsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// AccountCurrentFinancialsNetLiquidationValueV2Money includes the requested fields of the GraphQL type Money.
type AccountCurrentFinancialsNetLiquidationValueV2Money struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountCurrentFinancialsNetLiquidationValueV2Money.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) GetTypename() *string { return v.Typename }

// GetAmount returns AccountCurrentFinancialsNetLiquidationValueV2Money.Amount, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns AccountCurrentFinancialsNetLiquidationValueV2Money.Cents, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) GetCents() int { return v.Money.Cents }

// GetCurrency returns AccountCurrentFinancialsNetLiquidationValueV2Money.Currency, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) GetCurrency() string {
	return v.Money.Currency
}

func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCurrentFinancialsNetLiquidationValueV2Money
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCurrentFinancialsNetLiquidationValueV2Money = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCurrentFinancialsNetLiquidationValueV2Money struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCurrentFinancialsNetLiquidationValueV2Money) __premarshalJSON() (*__premarshalAccountCurrentFinancialsNetLiquidationValueV2Money, error) {
	var retval __premarshalAccountCurrentFinancialsNetLiquidationValueV2Money

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// AccountCurrentFinancialsSimpleReturns includes the requested fields of the GraphQL type SimpleReturns.
type AccountCurrentFinancialsSimpleReturns struct {
	SimpleReturns `json:"-"`
	Typename      *string `json:"__typename"`
}

// GetTypename returns AccountCurrentFinancialsSimpleReturns.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsSimpleReturns) GetTypename() *string { return v.Typename }

// GetAmount returns AccountCurrentFinancialsSimpleReturns.Amount, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsSimpleReturns) GetAmount() SimpleReturnsAmountMoney {
	return v.SimpleReturns.Amount
}

// GetAsOf returns AccountCurrentFinancialsSimpleReturns.AsOf, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsSimpleReturns) GetAsOf() *time.Time { return v.SimpleReturns.AsOf }

// GetRate returns AccountCurrentFinancialsSimpleReturns.Rate, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsSimpleReturns) GetRate() string { return v.SimpleReturns.Rate }

// GetReferenceDate returns AccountCurrentFinancialsSimpleReturns.ReferenceDate, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsSimpleReturns) GetReferenceDate() *time.Time {
	return v.SimpleReturns.ReferenceDate
}

func (v *AccountCurrentFinancialsSimpleReturns) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCurrentFinancialsSimpleReturns
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCurrentFinancialsSimpleReturns = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SimpleReturns)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCurrentFinancialsSimpleReturns struct {
	Typename *string `json:"__typename"`

	Amount SimpleReturnsAmountMoney `json:"amount"`

	AsOf json.RawMessage `json:"asOf"`

	Rate string `json:"rate"`

	ReferenceDate json.RawMessage `json:"referenceDate"`
}

func (v *AccountCurrentFinancialsSimpleReturns) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCurrentFinancialsSimpleReturns) __premarshalJSON() (*__premarshalAccountCurrentFinancialsSimpleReturns, error) {
	var retval __premarshalAccountCurrentFinancialsSimpleReturns

	retval.Typename = v.Typename
	retval.Amount = v.SimpleReturns.Amount
	{

		dst := &retval.AsOf
		src := v.SimpleReturns.AsOf
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCurrentFinancialsSimpleReturns.SimpleReturns.AsOf: %w", err)
			}
		}
	}
	retval.Rate = v.SimpleReturns.Rate
	{

		dst := &retval.ReferenceDate
		src := v.SimpleReturns.ReferenceDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCurrentFinancialsSimpleReturns.SimpleReturns.ReferenceDate: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccountCurrentFinancialsTotalDepositsMoney includes the requested fields of the GraphQL type Money.
type AccountCurrentFinancialsTotalDepositsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountCurrentFinancialsTotalDepositsMoney.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalDepositsMoney) GetTypename() *string { return v.Typename }

// GetAmount returns AccountCurrentFinancialsTotalDepositsMoney.Amount, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalDepositsMoney) GetAmount() string { return v.Money.Amount }

// GetCents returns AccountCurrentFinancialsTotalDepositsMoney.Cents, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalDepositsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns AccountCurrentFinancialsTotalDepositsMoney.Currency, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalDepositsMoney) GetCurrency() string { return v.Money.Currency }

func (v *AccountCurrentFinancialsTotalDepositsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCurrentFinancialsTotalDepositsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCurrentFinancialsTotalDepositsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCurrentFinancialsTotalDepositsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *AccountCurrentFinancialsTotalDepositsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCurrentFinancialsTotalDepositsMoney) __premarshalJSON() (*__premarshalAccountCurrentFinancialsTotalDepositsMoney, error) {
	var retval __premarshalAccountCurrentFinancialsTotalDepositsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// AccountCurrentFinancialsTotalWithdrawalsMoney includes the requested fields of the GraphQL type Money.
type AccountCurrentFinancialsTotalWithdrawalsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountCurrentFinancialsTotalWithdrawalsMoney.Typename, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) GetTypename() *string { return v.Typename }

// GetAmount returns AccountCurrentFinancialsTotalWithdrawalsMoney.Amount, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) GetAmount() string { return v.Money.Amount }

// GetCents returns AccountCurrentFinancialsTotalWithdrawalsMoney.Cents, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns AccountCurrentFinancialsTotalWithdrawalsMoney.Currency, and is useful for accessing the field via an interface.
func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) GetCurrency() string { return v.Money.Currency }

func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCurrentFinancialsTotalWithdrawalsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCurrentFinancialsTotalWithdrawalsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCurrentFinancialsTotalWithdrawalsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCurrentFinancialsTotalWithdrawalsMoney) __premarshalJSON() (*__premarshalAccountCurrentFinancialsTotalWithdrawalsMoney, error) {
	var retval __premarshalAccountCurrentFinancialsTotalWithdrawalsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// AccountCustodianAccountsCustodianAccount includes the requested fields of the GraphQL type CustodianAccount.
type AccountCustodianAccountsCustodianAccount struct {
	CustodianAccount `json:"-"`
	Typename         *string `json:"__typename"`
}

// GetTypename returns AccountCustodianAccountsCustodianAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetTypename() *string { return v.Typename }

// GetId returns AccountCustodianAccountsCustodianAccount.Id, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetId() string { return v.CustodianAccount.Id }

// GetBranch returns AccountCustodianAccountsCustodianAccount.Branch, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetBranch() *string {
	return v.CustodianAccount.Branch
}

// GetCustodian returns AccountCustodianAccountsCustodianAccount.Custodian, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetCustodian() *string {
	return v.CustodianAccount.Custodian
}

// GetStatus returns AccountCustodianAccountsCustodianAccount.Status, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetStatus() string {
	return v.CustodianAccount.Status
}

// GetUpdatedAt returns AccountCustodianAccountsCustodianAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountCustodianAccountsCustodianAccount) GetUpdatedAt() *time.Time {
	return v.CustodianAccount.UpdatedAt
}

func (v *AccountCustodianAccountsCustodianAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountCustodianAccountsCustodianAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountCustodianAccountsCustodianAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CustodianAccount)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountCustodianAccountsCustodianAccount struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	Branch *string `json:"branch"`

	Custodian *string `json:"custodian"`

	Status string `json:"status"`

	UpdatedAt json.RawMessage `json:"updatedAt"`
}

func (v *AccountCustodianAccountsCustodianAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountCustodianAccountsCustodianAccount) __premarshalJSON() (*__premarshalAccountCustodianAccountsCustodianAccount, error) {
	var retval __premarshalAccountCustodianAccountsCustodianAccount

	retval.Typename = v.Typename
	retval.Id = v.CustodianAccount.Id
	retval.Branch = v.CustodianAccount.Branch
	retval.Custodian = v.CustodianAccount.Custodian
	retval.Status = v.CustodianAccount.Status
	{

		dst := &retval.UpdatedAt
		src := v.CustodianAccount.UpdatedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountCustodianAccountsCustodianAccount.CustodianAccount.UpdatedAt: %w", err)
			}
		}
	}
	return &retval, nil
}

// AccountFeature includes the GraphQL fields of AccountFeature requested by the fragment AccountFeature.
type AccountFeature struct {
	Name     string  `json:"name"`
	Enabled  bool    `json:"enabled"`
	Typename *string `json:"__typename"`
}

// GetName returns AccountFeature.Name, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetName() string { return v.Name }

// GetEnabled returns AccountFeature.Enabled, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetEnabled() bool { return v.Enabled }

// GetTypename returns AccountFeature.Typename, and is useful for accessing the field via an interface.
func (v *AccountFeature) GetTypename() *string { return v.Typename }

// AccountFinancials includes the GraphQL fields of Account requested by the fragment AccountFinancials.
type AccountFinancials struct {
	Id                string                                               `json:"id"`
	CustodianAccounts []AccountFinancialsCustodianAccountsCustodianAccount `json:"custodianAccounts"`
	Financials        AccountFinancialsFinancialsAccountFinancials         `json:"financials"`
	Typename          *string                                              `json:"__typename"`
}

// GetId returns AccountFinancials.Id, and is useful for accessing the field via an interface.
func (v *AccountFinancials) GetId() string { return v.Id }

// GetCustodianAccounts returns AccountFinancials.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *AccountFinancials) GetCustodianAccounts() []AccountFinancialsCustodianAccountsCustodianAccount {
	return v.CustodianAccounts
}

// GetFinancials returns AccountFinancials.Financials, and is useful for accessing the field via an interface.
func (v *AccountFinancials) GetFinancials() AccountFinancialsFinancialsAccountFinancials {
	return v.Financials
}

// GetTypename returns AccountFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancials) GetTypename() *string { return v.Typename }

// AccountFinancialsCustodianAccountsCustodianAccount includes the requested fields of the GraphQL type CustodianAccount.
type AccountFinancialsCustodianAccountsCustodianAccount struct {
	Id         string                                                        `json:"id"`
	Branch     *string                                                       `json:"branch"`
	Financials *AccountFinancialsCustodianAccountsCustodianAccountFinancials `json:"financials"`
	Typename   *string                                                       `json:"__typename"`
}

// GetId returns AccountFinancialsCustodianAccountsCustodianAccount.Id, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccount) GetId() string { return v.Id }

// GetBranch returns AccountFinancialsCustodianAccountsCustodianAccount.Branch, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccount) GetBranch() *string { return v.Branch }

// GetFinancials returns AccountFinancialsCustodianAccountsCustodianAccount.Financials, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccount) GetFinancials() *AccountFinancialsCustodianAccountsCustodianAccountFinancials {
	return v.Financials
}

// GetTypename returns AccountFinancialsCustodianAccountsCustodianAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccount) GetTypename() *string { return v.Typename }

// AccountFinancialsCustodianAccountsCustodianAccountFinancials includes the requested fields of the GraphQL type CustodianAccountFinancials.
type AccountFinancialsCustodianAccountsCustodianAccountFinancials struct {
	Current  *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues `json:"current"`
	Typename *string                                                                                                    `json:"__typename"`
}

// GetCurrent returns AccountFinancialsCustodianAccountsCustodianAccountFinancials.Current, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancials) GetCurrent() *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues {
	return v.Current
}

// GetTypename returns AccountFinancialsCustodianAccountsCustodianAccountFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancials) GetTypename() *string {
	return v.Typename
}

// AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues includes the requested fields of the GraphQL type CustodianAccountCurrentFinancialValues.
type AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues struct {
	CustodianAccountCurrentFinancialValues `json:"-"`
	Typename                               *string `json:"__typename"`
}

// GetTypename returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetTypename() *string {
	return v.Typename
}

// GetDeposits returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.Deposits, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetDeposits() CustodianAccountCurrentFinancialValuesDepositsMoney {
	return v.CustodianAccountCurrentFinancialValues.Deposits
}

// GetEarnings returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.Earnings, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetEarnings() CustodianAccountCurrentFinancialValuesEarningsMoney {
	return v.CustodianAccountCurrentFinancialValues.Earnings
}

// GetNetDeposits returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.NetDeposits, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetNetDeposits() CustodianAccountCurrentFinancialValuesNetDepositsMoney {
	return v.CustodianAccountCurrentFinancialValues.NetDeposits
}

// GetNetLiquidationValue returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.NetLiquidationValue, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetNetLiquidationValue() CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney {
	return v.CustodianAccountCurrentFinancialValues.NetLiquidationValue
}

// GetWithdrawals returns AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues.Withdrawals, and is useful for accessing the field via an interface.
func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) GetWithdrawals() CustodianAccountCurrentFinancialValuesWithdrawalsMoney {
	return v.CustodianAccountCurrentFinancialValues.Withdrawals
}

func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.CustodianAccountCurrentFinancialValues)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues struct {
	Typename *string `json:"__typename"`

	Deposits CustodianAccountCurrentFinancialValuesDepositsMoney `json:"deposits"`

	Earnings CustodianAccountCurrentFinancialValuesEarningsMoney `json:"earnings"`

	NetDeposits CustodianAccountCurrentFinancialValuesNetDepositsMoney `json:"netDeposits"`

	NetLiquidationValue CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney `json:"netLiquidationValue"`

	Withdrawals CustodianAccountCurrentFinancialValuesWithdrawalsMoney `json:"withdrawals"`
}

func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues) __premarshalJSON() (*__premarshalAccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues, error) {
	var retval __premarshalAccountFinancialsCustodianAccountsCustodianAccountFinancialsCurrentCustodianAccountCurrentFinancialValues

	retval.Typename = v.Typename
	retval.Deposits = v.CustodianAccountCurrentFinancialValues.Deposits
	retval.Earnings = v.CustodianAccountCurrentFinancialValues.Earnings
	retval.NetDeposits = v.CustodianAccountCurrentFinancialValues.NetDeposits
	retval.NetLiquidationValue = v.CustodianAccountCurrentFinancialValues.NetLiquidationValue
	retval.Withdrawals = v.CustodianAccountCurrentFinancialValues.Withdrawals
	return &retval, nil
}

// AccountFinancialsFinancialsAccountFinancials includes the requested fields of the GraphQL type AccountFinancials.
type AccountFinancialsFinancialsAccountFinancials struct {
	CurrentCombined *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials `json:"currentCombined"`
	Typename        *string                                                                              `json:"__typename"`
}

// GetCurrentCombined returns AccountFinancialsFinancialsAccountFinancials.CurrentCombined, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancials) GetCurrentCombined() *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials {
	return v.CurrentCombined
}

// GetTypename returns AccountFinancialsFinancialsAccountFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancials) GetTypename() *string { return v.Typename }

// AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials includes the requested fields of the GraphQL type AccountCurrentFinancials.
type AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials struct {
	Id                       string `json:"id"`
	AccountCurrentFinancials `json:"-"`
	Typename                 *string `json:"__typename"`
}

// GetId returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.Id, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetId() string {
	return v.Id
}

// GetTypename returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetTypename() *string {
	return v.Typename
}

// GetNetLiquidationValueV2 returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.NetLiquidationValueV2, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetNetLiquidationValueV2() *AccountCurrentFinancialsNetLiquidationValueV2Money {
	return v.AccountCurrentFinancials.NetLiquidationValueV2
}

// GetNetDeposits returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.NetDeposits, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetNetDeposits() *AccountCurrentFinancialsNetDepositsMoney {
	return v.AccountCurrentFinancials.NetDeposits
}

// GetSimpleReturns returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.SimpleReturns, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetSimpleReturns() *AccountCurrentFinancialsSimpleReturns {
	return v.AccountCurrentFinancials.SimpleReturns
}

// GetTotalDeposits returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.TotalDeposits, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetTotalDeposits() *AccountCurrentFinancialsTotalDepositsMoney {
	return v.AccountCurrentFinancials.TotalDeposits
}

// GetTotalWithdrawals returns AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials.TotalWithdrawals, and is useful for accessing the field via an interface.
func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) GetTotalWithdrawals() *AccountCurrentFinancialsTotalWithdrawalsMoney {
	return v.AccountCurrentFinancials.TotalWithdrawals
}

func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountCurrentFinancials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials struct {
	Id string `json:"id"`

	Typename *string `json:"__typename"`

	NetLiquidationValueV2 *AccountCurrentFinancialsNetLiquidationValueV2Money `json:"netLiquidationValueV2"`

	NetDeposits *AccountCurrentFinancialsNetDepositsMoney `json:"netDeposits"`

	SimpleReturns *AccountCurrentFinancialsSimpleReturns `json:"simpleReturns"`

	TotalDeposits *AccountCurrentFinancialsTotalDepositsMoney `json:"totalDeposits"`

	TotalWithdrawals *AccountCurrentFinancialsTotalWithdrawalsMoney `json:"totalWithdrawals"`
}

func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials) __premarshalJSON() (*__premarshalAccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials, error) {
	var retval __premarshalAccountFinancialsFinancialsAccountFinancialsCurrentCombinedAccountCurrentFinancials

	retval.Id = v.Id
	retval.Typename = v.Typename
	retval.NetLiquidationValueV2 = v.AccountCurrentFinancials.NetLiquidationValueV2
	retval.NetDeposits = v.AccountCurrentFinancials.NetDeposits
	retval.SimpleReturns = v.AccountCurrentFinancials.SimpleReturns
	retval.TotalDeposits = v.AccountCurrentFinancials.TotalDeposits
	retval.TotalWithdrawals = v.AccountCurrentFinancials.TotalWithdrawals
	return &retval, nil
}

// AccountOwner includes the GraphQL fields of AccountOwner requested by the fragment AccountOwner.
type AccountOwner struct {
	AccountId                      string                                               `json:"accountId"`
	IdentityId                     string                                               `json:"identityId"`
	AccountNickname                *string                                              `json:"accountNickname"`
	ClientCanonicalId              string                                               `json:"clientCanonicalId"`
	AccountOpeningAgreementsSigned *bool                                                `json:"accountOpeningAgreementsSigned"`
	Name                           string                                               `json:"name"`
	Email                          string                                               `json:"email"`
	OwnershipType                  string                                               `json:"ownershipType"`
	ActiveInvitation               []AccountOwnerActiveInvitationAccountOwnerInvitation `json:"activeInvitation"`
	SentInvitations                []AccountOwnerSentInvitationsAccountOwnerInvitation  `json:"sentInvitations"`
	Typename                       *string                                              `json:"__typename"`
}

// GetAccountId returns AccountOwner.AccountId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountId() string { return v.AccountId }

// GetIdentityId returns AccountOwner.IdentityId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetIdentityId() string { return v.IdentityId }

// GetAccountNickname returns AccountOwner.AccountNickname, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountNickname() *string { return v.AccountNickname }

// GetClientCanonicalId returns AccountOwner.ClientCanonicalId, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetClientCanonicalId() string { return v.ClientCanonicalId }

// GetAccountOpeningAgreementsSigned returns AccountOwner.AccountOpeningAgreementsSigned, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetAccountOpeningAgreementsSigned() *bool {
	return v.AccountOpeningAgreementsSigned
}

// GetName returns AccountOwner.Name, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetName() string { return v.Name }

// GetEmail returns AccountOwner.Email, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetEmail() string { return v.Email }

// GetOwnershipType returns AccountOwner.OwnershipType, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetOwnershipType() string { return v.OwnershipType }

// GetActiveInvitation returns AccountOwner.ActiveInvitation, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetActiveInvitation() []AccountOwnerActiveInvitationAccountOwnerInvitation {
	return v.ActiveInvitation
}

// GetSentInvitations returns AccountOwner.SentInvitations, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetSentInvitations() []AccountOwnerSentInvitationsAccountOwnerInvitation {
	return v.SentInvitations
}

// GetTypename returns AccountOwner.Typename, and is useful for accessing the field via an interface.
func (v *AccountOwner) GetTypename() *string { return v.Typename }

// AccountOwnerActiveInvitationAccountOwnerInvitation includes the requested fields of the GraphQL type AccountOwnerInvitation.
type AccountOwnerActiveInvitationAccountOwnerInvitation struct {
	AccountOwnerInvitation `json:"-"`
	Typename               *string `json:"__typename"`
}

// GetTypename returns AccountOwnerActiveInvitationAccountOwnerInvitation.Typename, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetTypename() *string { return v.Typename }

// GetId returns AccountOwnerActiveInvitationAccountOwnerInvitation.Id, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetId() string {
	return v.AccountOwnerInvitation.Id
}

// GetCreatedAt returns AccountOwnerActiveInvitationAccountOwnerInvitation.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetCreatedAt() *time.Time {
	return v.AccountOwnerInvitation.CreatedAt
}

// GetInviteeName returns AccountOwnerActiveInvitationAccountOwnerInvitation.InviteeName, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetInviteeName() *string {
	return v.AccountOwnerInvitation.InviteeName
}

// GetInviteeEmail returns AccountOwnerActiveInvitationAccountOwnerInvitation.InviteeEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetInviteeEmail() *string {
	return v.AccountOwnerInvitation.InviteeEmail
}

// GetInviterName returns AccountOwnerActiveInvitationAccountOwnerInvitation.InviterName, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetInviterName() *string {
	return v.AccountOwnerInvitation.InviterName
}

// GetInviterEmail returns AccountOwnerActiveInvitationAccountOwnerInvitation.InviterEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetInviterEmail() *string {
	return v.AccountOwnerInvitation.InviterEmail
}

// GetUpdatedAt returns AccountOwnerActiveInvitationAccountOwnerInvitation.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetUpdatedAt() *string {
	return v.AccountOwnerInvitation.UpdatedAt
}

// GetSentAt returns AccountOwnerActiveInvitationAccountOwnerInvitation.SentAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetSentAt() *string {
	return v.AccountOwnerInvitation.SentAt
}

// GetStatus returns AccountOwnerActiveInvitationAccountOwnerInvitation.Status, and is useful for accessing the field via an interface.
func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) GetStatus() *string {
	return v.AccountOwnerInvitation.Status
}

func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountOwnerActiveInvitationAccountOwnerInvitation
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountOwnerActiveInvitationAccountOwnerInvitation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountOwnerInvitation)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountOwnerActiveInvitationAccountOwnerInvitation struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	CreatedAt json.RawMessage `json:"createdAt"`

	InviteeName *string `json:"inviteeName"`

	InviteeEmail *string `json:"inviteeEmail"`

	InviterName *string `json:"inviterName"`

	InviterEmail *string `json:"inviterEmail"`

	UpdatedAt *string `json:"updatedAt"`

	SentAt *string `json:"sentAt"`

	Status *string `json:"status"`
}

func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountOwnerActiveInvitationAccountOwnerInvitation) __premarshalJSON() (*__premarshalAccountOwnerActiveInvitationAccountOwnerInvitation, error) {
	var retval __premarshalAccountOwnerActiveInvitationAccountOwnerInvitation

	retval.Typename = v.Typename
	retval.Id = v.AccountOwnerInvitation.Id
	{

		dst := &retval.CreatedAt
		src := v.AccountOwnerInvitation.CreatedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountOwnerActiveInvitationAccountOwnerInvitation.AccountOwnerInvitation.CreatedAt: %w", err)
			}
		}
	}
	retval.InviteeName = v.AccountOwnerInvitation.InviteeName
	retval.InviteeEmail = v.AccountOwnerInvitation.InviteeEmail
	retval.InviterName = v.AccountOwnerInvitation.InviterName
	retval.InviterEmail = v.AccountOwnerInvitation.InviterEmail
	retval.UpdatedAt = v.AccountOwnerInvitation.UpdatedAt
	retval.SentAt = v.AccountOwnerInvitation.SentAt
	retval.Status = v.AccountOwnerInvitation.Status
	return &retval, nil
}

// AccountOwnerInvitation includes the GraphQL fields of AccountOwnerInvitation requested by the fragment AccountOwnerInvitation.
type AccountOwnerInvitation struct {
	Id           string     `json:"id"`
	CreatedAt    *time.Time `json:"-"`
	InviteeName  *string    `json:"inviteeName"`
	InviteeEmail *string    `json:"inviteeEmail"`
	InviterName  *string    `json:"inviterName"`
	InviterEmail *string    `json:"inviterEmail"`
	UpdatedAt    *string    `json:"updatedAt"`
	SentAt       *string    `json:"sentAt"`
	Status       *string    `json:"status"`
	Typename     *string    `json:"__typename"`
}

// GetId returns AccountOwnerInvitation.Id, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetId() string { return v.Id }

// GetCreatedAt returns AccountOwnerInvitation.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetInviteeName returns AccountOwnerInvitation.InviteeName, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetInviteeName() *string { return v.InviteeName }

// GetInviteeEmail returns AccountOwnerInvitation.InviteeEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetInviteeEmail() *string { return v.InviteeEmail }

// GetInviterName returns AccountOwnerInvitation.InviterName, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetInviterName() *string { return v.InviterName }

// GetInviterEmail returns AccountOwnerInvitation.InviterEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetInviterEmail() *string { return v.InviterEmail }

// GetUpdatedAt returns AccountOwnerInvitation.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetUpdatedAt() *string { return v.UpdatedAt }

// GetSentAt returns AccountOwnerInvitation.SentAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetSentAt() *string { return v.SentAt }

// GetStatus returns AccountOwnerInvitation.Status, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetStatus() *string { return v.Status }

// GetTypename returns AccountOwnerInvitation.Typename, and is useful for accessing the field via an interface.
func (v *AccountOwnerInvitation) GetTypename() *string { return v.Typename }

func (v *AccountOwnerInvitation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountOwnerInvitation
		CreatedAt json.RawMessage `json:"createdAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountOwnerInvitation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreatedAt
		src := firstPass.CreatedAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal AccountOwnerInvitation.CreatedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshalAccountOwnerInvitation struct {
	Id string `json:"id"`

	CreatedAt json.RawMessage `json:"createdAt"`

	InviteeName *string `json:"inviteeName"`

	InviteeEmail *string `json:"inviteeEmail"`

	InviterName *string `json:"inviterName"`

	InviterEmail *string `json:"inviterEmail"`

	UpdatedAt *string `json:"updatedAt"`

	SentAt *string `json:"sentAt"`

	Status *string `json:"status"`

	Typename *string `json:"__typename"`
}

func (v *AccountOwnerInvitation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountOwnerInvitation) __premarshalJSON() (*__premarshalAccountOwnerInvitation, error) {
	var retval __premarshalAccountOwnerInvitation

	retval.Id = v.Id
	{

		dst := &retval.CreatedAt
		src := v.CreatedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountOwnerInvitation.CreatedAt: %w", err)
			}
		}
	}
	retval.InviteeName = v.InviteeName
	retval.InviteeEmail = v.InviteeEmail
	retval.InviterName = v.InviterName
	retval.InviterEmail = v.InviterEmail
	retval.UpdatedAt = v.UpdatedAt
	retval.SentAt = v.SentAt
	retval.Status = v.Status
	retval.Typename = v.Typename
	return &retval, nil
}

// AccountOwnerSentInvitationsAccountOwnerInvitation includes the requested fields of the GraphQL type AccountOwnerInvitation.
type AccountOwnerSentInvitationsAccountOwnerInvitation struct {
	AccountOwnerInvitation `json:"-"`
	Typename               *string `json:"__typename"`
}

// GetTypename returns AccountOwnerSentInvitationsAccountOwnerInvitation.Typename, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetTypename() *string { return v.Typename }

// GetId returns AccountOwnerSentInvitationsAccountOwnerInvitation.Id, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetId() string {
	return v.AccountOwnerInvitation.Id
}

// GetCreatedAt returns AccountOwnerSentInvitationsAccountOwnerInvitation.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetCreatedAt() *time.Time {
	return v.AccountOwnerInvitation.CreatedAt
}

// GetInviteeName returns AccountOwnerSentInvitationsAccountOwnerInvitation.InviteeName, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetInviteeName() *string {
	return v.AccountOwnerInvitation.InviteeName
}

// GetInviteeEmail returns AccountOwnerSentInvitationsAccountOwnerInvitation.InviteeEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetInviteeEmail() *string {
	return v.AccountOwnerInvitation.InviteeEmail
}

// GetInviterName returns AccountOwnerSentInvitationsAccountOwnerInvitation.InviterName, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetInviterName() *string {
	return v.AccountOwnerInvitation.InviterName
}

// GetInviterEmail returns AccountOwnerSentInvitationsAccountOwnerInvitation.InviterEmail, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetInviterEmail() *string {
	return v.AccountOwnerInvitation.InviterEmail
}

// GetUpdatedAt returns AccountOwnerSentInvitationsAccountOwnerInvitation.UpdatedAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetUpdatedAt() *string {
	return v.AccountOwnerInvitation.UpdatedAt
}

// GetSentAt returns AccountOwnerSentInvitationsAccountOwnerInvitation.SentAt, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetSentAt() *string {
	return v.AccountOwnerInvitation.SentAt
}

// GetStatus returns AccountOwnerSentInvitationsAccountOwnerInvitation.Status, and is useful for accessing the field via an interface.
func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) GetStatus() *string {
	return v.AccountOwnerInvitation.Status
}

func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountOwnerSentInvitationsAccountOwnerInvitation
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountOwnerSentInvitationsAccountOwnerInvitation = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountOwnerInvitation)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountOwnerSentInvitationsAccountOwnerInvitation struct {
	Typename *string `json:"__typename"`

	Id string `json:"id"`

	CreatedAt json.RawMessage `json:"createdAt"`

	InviteeName *string `json:"inviteeName"`

	InviteeEmail *string `json:"inviteeEmail"`

	InviterName *string `json:"inviterName"`

	InviterEmail *string `json:"inviterEmail"`

	UpdatedAt *string `json:"updatedAt"`

	SentAt *string `json:"sentAt"`

	Status *string `json:"status"`
}

func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountOwnerSentInvitationsAccountOwnerInvitation) __premarshalJSON() (*__premarshalAccountOwnerSentInvitationsAccountOwnerInvitation, error) {
	var retval __premarshalAccountOwnerSentInvitationsAccountOwnerInvitation

	retval.Typename = v.Typename
	retval.Id = v.AccountOwnerInvitation.Id
	{

		dst := &retval.CreatedAt
		src := v.AccountOwnerInvitation.CreatedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountOwnerSentInvitationsAccountOwnerInvitation.AccountOwnerInvitation.CreatedAt: %w", err)
			}
		}
	}
	retval.InviteeName = v.AccountOwnerInvitation.InviteeName
	retval.InviteeEmail = v.AccountOwnerInvitation.InviteeEmail
	retval.InviterName = v.AccountOwnerInvitation.InviterName
	retval.InviterEmail = v.AccountOwnerInvitation.InviterEmail
	retval.UpdatedAt = v.AccountOwnerInvitation.UpdatedAt
	retval.SentAt = v.AccountOwnerInvitation.SentAt
	retval.Status = v.AccountOwnerInvitation.Status
	return &retval, nil
}

// AccountWithFinancials includes the GraphQL fields of Account requested by the fragment AccountWithFinancials.
type AccountWithFinancials struct {
	AccountWithLink   `json:"-"`
	AccountFinancials `json:"-"`
	Typename          *string `json:"__typename"`
}

// GetTypename returns AccountWithFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetTypename() *string { return v.Typename }

// GetLinkedAccount returns AccountWithFinancials.LinkedAccount, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetLinkedAccount() *AccountWithLinkLinkedAccount {
	return v.AccountWithLink.LinkedAccount
}

// GetId returns AccountWithFinancials.Id, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetId() string { return v.AccountFinancials.Id }

// GetCustodianAccounts returns AccountWithFinancials.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetCustodianAccounts() []AccountFinancialsCustodianAccountsCustodianAccount {
	return v.AccountFinancials.CustodianAccounts
}

// GetFinancials returns AccountWithFinancials.Financials, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetFinancials() AccountFinancialsFinancialsAccountFinancials {
	return v.AccountFinancials.Financials
}

// GetArchivedAt returns AccountWithFinancials.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetArchivedAt() *time.Time {
	return v.AccountWithLink.Account.AccountCore.ArchivedAt
}

// GetBranch returns AccountWithFinancials.Branch, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetBranch() *string {
	return v.AccountWithLink.Account.AccountCore.Branch
}

// GetClosedAt returns AccountWithFinancials.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetClosedAt() *time.Time {
	return v.AccountWithLink.Account.AccountCore.ClosedAt
}

// GetCreatedAt returns AccountWithFinancials.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetCreatedAt() time.Time {
	return v.AccountWithLink.Account.AccountCore.CreatedAt
}

// GetCacheExpiredAt returns AccountWithFinancials.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetCacheExpiredAt() *time.Time {
	return v.AccountWithLink.Account.AccountCore.CacheExpiredAt
}

// GetCurrency returns AccountWithFinancials.Currency, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetCurrency() *string {
	return v.AccountWithLink.Account.AccountCore.Currency
}

// GetRequiredIdentityVerification returns AccountWithFinancials.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetRequiredIdentityVerification() *string {
	return v.AccountWithLink.Account.AccountCore.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountWithFinancials.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetUnifiedAccountType() *string {
	return v.AccountWithLink.Account.AccountCore.UnifiedAccountType
}

// GetSupportedCurrencies returns AccountWithFinancials.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetSupportedCurrencies() []string {
	return v.AccountWithLink.Account.AccountCore.SupportedCurrencies
}

// GetNickname returns AccountWithFinancials.Nickname, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetNickname() *string {
	return v.AccountWithLink.Account.AccountCore.Nickname
}

// GetStatus returns AccountWithFinancials.Status, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetStatus() string {
	return v.AccountWithLink.Account.AccountCore.Status
}

// GetAccountOwnerConfiguration returns AccountWithFinancials.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetAccountOwnerConfiguration() *string {
	return v.AccountWithLink.Account.AccountCore.AccountOwnerConfiguration
}

// GetAccountFeatures returns AccountWithFinancials.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.AccountWithLink.Account.AccountCore.AccountFeatures
}

// GetAccountOwners returns AccountWithFinancials.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.AccountWithLink.Account.AccountCore.AccountOwners
}

// GetType returns AccountWithFinancials.Type, and is useful for accessing the field via an interface.
func (v *AccountWithFinancials) GetType() *string { return v.AccountWithLink.Account.AccountCore.Type }

func (v *AccountWithFinancials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountWithFinancials
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountWithFinancials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountWithLink)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.AccountFinancials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountWithFinancials struct {
	Typename *string `json:"__typename"`

	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`

	Id string `json:"id"`

	CustodianAccounts []AccountFinancialsCustodianAccountsCustodianAccount `json:"custodianAccounts"`

	Financials AccountFinancialsFinancialsAccountFinancials `json:"financials"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`
}

func (v *AccountWithFinancials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountWithFinancials) __premarshalJSON() (*__premarshalAccountWithFinancials, error) {
	var retval __premarshalAccountWithFinancials

	retval.Typename = v.Typename
	retval.LinkedAccount = v.AccountWithLink.LinkedAccount
	retval.Id = v.AccountFinancials.Id
	retval.CustodianAccounts = v.AccountFinancials.CustodianAccounts
	retval.Financials = v.AccountFinancials.Financials
	{

		dst := &retval.ArchivedAt
		src := v.AccountWithLink.Account.AccountCore.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithFinancials.AccountWithLink.Account.AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.AccountWithLink.Account.AccountCore.Branch
	{

		dst := &retval.ClosedAt
		src := v.AccountWithLink.Account.AccountCore.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithFinancials.AccountWithLink.Account.AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.AccountWithLink.Account.AccountCore.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccountWithFinancials.AccountWithLink.Account.AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.AccountWithLink.Account.AccountCore.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithFinancials.AccountWithLink.Account.AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.AccountWithLink.Account.AccountCore.Currency
	retval.RequiredIdentityVerification = v.AccountWithLink.Account.AccountCore.RequiredIdentityVerification
	retval.UnifiedAccountType = v.AccountWithLink.Account.AccountCore.UnifiedAccountType
	retval.SupportedCurrencies = v.AccountWithLink.Account.AccountCore.SupportedCurrencies
	retval.Nickname = v.AccountWithLink.Account.AccountCore.Nickname
	retval.Status = v.AccountWithLink.Account.AccountCore.Status
	retval.AccountOwnerConfiguration = v.AccountWithLink.Account.AccountCore.AccountOwnerConfiguration
	retval.AccountFeatures = v.AccountWithLink.Account.AccountCore.AccountFeatures
	retval.AccountOwners = v.AccountWithLink.Account.AccountCore.AccountOwners
	retval.Type = v.AccountWithLink.Account.AccountCore.Type
	return &retval, nil
}

// AccountWithLink includes the GraphQL fields of Account requested by the fragment AccountWithLink.
type AccountWithLink struct {
	Account       `json:"-"`
	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`
	Typename      *string                       `json:"__typename"`
}

// GetLinkedAccount returns AccountWithLink.LinkedAccount, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetLinkedAccount() *AccountWithLinkLinkedAccount { return v.LinkedAccount }

// GetTypename returns AccountWithLink.Typename, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetTypename() *string { return v.Typename }

// GetCustodianAccounts returns AccountWithLink.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCustodianAccounts() []AccountCustodianAccountsCustodianAccount {
	return v.Account.CustodianAccounts
}

// GetId returns AccountWithLink.Id, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetId() string { return v.Account.AccountCore.Id }

// GetArchivedAt returns AccountWithLink.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetArchivedAt() *time.Time { return v.Account.AccountCore.ArchivedAt }

// GetBranch returns AccountWithLink.Branch, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetBranch() *string { return v.Account.AccountCore.Branch }

// GetClosedAt returns AccountWithLink.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetClosedAt() *time.Time { return v.Account.AccountCore.ClosedAt }

// GetCreatedAt returns AccountWithLink.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCreatedAt() time.Time { return v.Account.AccountCore.CreatedAt }

// GetCacheExpiredAt returns AccountWithLink.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCacheExpiredAt() *time.Time { return v.Account.AccountCore.CacheExpiredAt }

// GetCurrency returns AccountWithLink.Currency, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetCurrency() *string { return v.Account.AccountCore.Currency }

// GetRequiredIdentityVerification returns AccountWithLink.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetRequiredIdentityVerification() *string {
	return v.Account.AccountCore.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountWithLink.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetUnifiedAccountType() *string {
	return v.Account.AccountCore.UnifiedAccountType
}

// GetSupportedCurrencies returns AccountWithLink.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetSupportedCurrencies() []string {
	return v.Account.AccountCore.SupportedCurrencies
}

// GetNickname returns AccountWithLink.Nickname, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetNickname() *string { return v.Account.AccountCore.Nickname }

// GetStatus returns AccountWithLink.Status, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetStatus() string { return v.Account.AccountCore.Status }

// GetAccountOwnerConfiguration returns AccountWithLink.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountOwnerConfiguration() *string {
	return v.Account.AccountCore.AccountOwnerConfiguration
}

// GetAccountFeatures returns AccountWithLink.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.Account.AccountCore.AccountFeatures
}

// GetAccountOwners returns AccountWithLink.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.Account.AccountCore.AccountOwners
}

// GetType returns AccountWithLink.Type, and is useful for accessing the field via an interface.
func (v *AccountWithLink) GetType() *string { return v.Account.AccountCore.Type }

func (v *AccountWithLink) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountWithLink
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountWithLink = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Account)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountWithLink struct {
	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`

	Typename *string `json:"__typename"`

	CustodianAccounts []AccountCustodianAccountsCustodianAccount `json:"custodianAccounts"`

	Id string `json:"id"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`
}

func (v *AccountWithLink) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountWithLink) __premarshalJSON() (*__premarshalAccountWithLink, error) {
	var retval __premarshalAccountWithLink

	retval.LinkedAccount = v.LinkedAccount
	retval.Typename = v.Typename
	retval.CustodianAccounts = v.Account.CustodianAccounts
	retval.Id = v.Account.AccountCore.Id
	{

		dst := &retval.ArchivedAt
		src := v.Account.AccountCore.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLink.Account.AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.Account.AccountCore.Branch
	{

		dst := &retval.ClosedAt
		src := v.Account.AccountCore.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLink.Account.AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.Account.AccountCore.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccountWithLink.Account.AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.Account.AccountCore.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLink.Account.AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.Account.AccountCore.Currency
	retval.RequiredIdentityVerification = v.Account.AccountCore.RequiredIdentityVerification
	retval.UnifiedAccountType = v.Account.AccountCore.UnifiedAccountType
	retval.SupportedCurrencies = v.Account.AccountCore.SupportedCurrencies
	retval.Nickname = v.Account.AccountCore.Nickname
	retval.Status = v.Account.AccountCore.Status
	retval.AccountOwnerConfiguration = v.Account.AccountCore.AccountOwnerConfiguration
	retval.AccountFeatures = v.Account.AccountCore.AccountFeatures
	retval.AccountOwners = v.Account.AccountCore.AccountOwners
	retval.Type = v.Account.AccountCore.Type
	return &retval, nil
}

// AccountWithLinkLinkedAccount includes the requested fields of the GraphQL type Account.
type AccountWithLinkLinkedAccount struct {
	Account  `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns AccountWithLinkLinkedAccount.Typename, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetTypename() *string { return v.Typename }

// GetCustodianAccounts returns AccountWithLinkLinkedAccount.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCustodianAccounts() []AccountCustodianAccountsCustodianAccount {
	return v.Account.CustodianAccounts
}

// GetId returns AccountWithLinkLinkedAccount.Id, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetId() string { return v.Account.AccountCore.Id }

// GetArchivedAt returns AccountWithLinkLinkedAccount.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetArchivedAt() *time.Time {
	return v.Account.AccountCore.ArchivedAt
}

// GetBranch returns AccountWithLinkLinkedAccount.Branch, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetBranch() *string { return v.Account.AccountCore.Branch }

// GetClosedAt returns AccountWithLinkLinkedAccount.ClosedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetClosedAt() *time.Time {
	return v.Account.AccountCore.ClosedAt
}

// GetCreatedAt returns AccountWithLinkLinkedAccount.CreatedAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCreatedAt() time.Time {
	return v.Account.AccountCore.CreatedAt
}

// GetCacheExpiredAt returns AccountWithLinkLinkedAccount.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCacheExpiredAt() *time.Time {
	return v.Account.AccountCore.CacheExpiredAt
}

// GetCurrency returns AccountWithLinkLinkedAccount.Currency, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetCurrency() *string { return v.Account.AccountCore.Currency }

// GetRequiredIdentityVerification returns AccountWithLinkLinkedAccount.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetRequiredIdentityVerification() *string {
	return v.Account.AccountCore.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AccountWithLinkLinkedAccount.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetUnifiedAccountType() *string {
	return v.Account.AccountCore.UnifiedAccountType
}

// GetSupportedCurrencies returns AccountWithLinkLinkedAccount.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetSupportedCurrencies() []string {
	return v.Account.AccountCore.SupportedCurrencies
}

// GetNickname returns AccountWithLinkLinkedAccount.Nickname, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetNickname() *string { return v.Account.AccountCore.Nickname }

// GetStatus returns AccountWithLinkLinkedAccount.Status, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetStatus() string { return v.Account.AccountCore.Status }

// GetAccountOwnerConfiguration returns AccountWithLinkLinkedAccount.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountOwnerConfiguration() *string {
	return v.Account.AccountCore.AccountOwnerConfiguration
}

// GetAccountFeatures returns AccountWithLinkLinkedAccount.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.Account.AccountCore.AccountFeatures
}

// GetAccountOwners returns AccountWithLinkLinkedAccount.AccountOwners, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.Account.AccountCore.AccountOwners
}

// GetType returns AccountWithLinkLinkedAccount.Type, and is useful for accessing the field via an interface.
func (v *AccountWithLinkLinkedAccount) GetType() *string { return v.Account.AccountCore.Type }

func (v *AccountWithLinkLinkedAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AccountWithLinkLinkedAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.AccountWithLinkLinkedAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Account)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAccountWithLinkLinkedAccount struct {
	Typename *string `json:"__typename"`

	CustodianAccounts []AccountCustodianAccountsCustodianAccount `json:"custodianAccounts"`

	Id string `json:"id"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`
}

func (v *AccountWithLinkLinkedAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AccountWithLinkLinkedAccount) __premarshalJSON() (*__premarshalAccountWithLinkLinkedAccount, error) {
	var retval __premarshalAccountWithLinkLinkedAccount

	retval.Typename = v.Typename
	retval.CustodianAccounts = v.Account.CustodianAccounts
	retval.Id = v.Account.AccountCore.Id
	{

		dst := &retval.ArchivedAt
		src := v.Account.AccountCore.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLinkLinkedAccount.Account.AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.Account.AccountCore.Branch
	{

		dst := &retval.ClosedAt
		src := v.Account.AccountCore.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLinkLinkedAccount.Account.AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.Account.AccountCore.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AccountWithLinkLinkedAccount.Account.AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.Account.AccountCore.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AccountWithLinkLinkedAccount.Account.AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.Account.AccountCore.Currency
	retval.RequiredIdentityVerification = v.Account.AccountCore.RequiredIdentityVerification
	retval.UnifiedAccountType = v.Account.AccountCore.UnifiedAccountType
	retval.SupportedCurrencies = v.Account.AccountCore.SupportedCurrencies
	retval.Nickname = v.Account.AccountCore.Nickname
	retval.Status = v.Account.AccountCore.Status
	retval.AccountOwnerConfiguration = v.Account.AccountCore.AccountOwnerConfiguration
	retval.AccountFeatures = v.Account.AccountCore.AccountFeatures
	retval.AccountOwners = v.Account.AccountCore.AccountOwners
	retval.Type = v.Account.AccountCore.Type
	return &retval, nil
}

// Enum for ordering activity feed items
type ActivitiesOrderBy string

const (
	// Order by occurrence date descending (newest first)
	ActivitiesOrderByOccurredAtDesc ActivitiesOrderBy = "OCCURRED_AT_DESC"
	// Order by occurrence date ascending (oldest first)
	ActivitiesOrderByOccurredAtAsc ActivitiesOrderBy = "OCCURRED_AT_ASC"
)

// Activity includes the GraphQL fields of ActivityFeedItem requested by the fragment Activity.
// The GraphQL type's documentation follows.
//
// Activity feed item representing various financial activities
type Activity struct {
	// Associated account identifier
	AccountId string `json:"accountId"`
	// Name of the AFT originator
	AftOriginatorName *string `json:"aftOriginatorName"`
	// Category of the AFT transaction
	AftTransactionCategory *string `json:"aftTransactionCategory"`
	// Type of the AFT transaction
	AftTransactionType *string `json:"aftTransactionType"`
	// Amount of the transaction
	Amount string `json:"amount"`
	// Sign of the amount (positive/negative)
	AmountSign string `json:"amountSign"`
	// Quantity of the asset
	AssetQuantity string `json:"assetQuantity"`
	// Symbol of the asset
	AssetSymbol *string `json:"assetSymbol"`
	// Canonical identifier
	CanonicalId *string `json:"canonicalId"`
	// Currency used in the transaction
	Currency *string `json:"currency"`
	// Email for e-transfer
	ETransferEmail *string `json:"eTransferEmail"`
	// Name for e-transfer
	ETransferName *string `json:"eTransferName"`
	// External canonical identifier
	ExternalCanonicalId *string `json:"externalCanonicalId"`
	// Identity identifier
	IdentityId *string `json:"identityId"`
	// Name of the financial institution
	InstitutionName *string `json:"institutionName"`
	// When the activity occurred
	OccurredAt *time.Time `json:"-"`
	// P2P handle
	P2pHandle *string `json:"p2pHandle"`
	// P2P message
	P2pMessage *string `json:"p2pMessage"`
	// Merchant name for spending transactions
	SpendMerchant *string `json:"spendMerchant"`
	// Security identifier
	SecurityId *string `json:"securityId"`
	// Bill payment company name
	BillPayCompanyName *string `json:"billPayCompanyName"`
	// Bill payment payee nickname
	BillPayPayeeNickname *string `json:"billPayPayeeNickname"`
	// Redacted external account number
	RedactedExternalAccountNumber *string `json:"redactedExternalAccountNumber"`
	// Opposing account identifier
	OpposingAccountId *string `json:"opposingAccountId"`
	// Status of the activity
	Status *string `json:"status"`
	// Subtype of the activity
	SubType ActivitySubtype `json:"subType"`
	// Type of the activity
	Type ActivityType `json:"type"`
	// Strike price for options
	StrikePrice *string `json:"strikePrice"`
	// Type of contract
	ContractType *string `json:"contractType"`
	// Expiry date for contracts
	ExpiryDate *time.Time `json:"-"`
	// Cheque number
	ChequeNumber *string `json:"chequeNumber"`
	// Provisional credit amount
	ProvisionalCreditAmount *string `json:"provisionalCreditAmount"`
	// Primary blocker
	PrimaryBlocker *string `json:"primaryBlocker"`
	// Interest rate
	InterestRate *string `json:"interestRate"`
	// Frequency
	Frequency *string `json:"frequency"`
	// Symbol of the counter asset
	CounterAssetSymbol *string `json:"counterAssetSymbol"`
	// Reward program
	RewardProgram *string `json:"rewardProgram"`
	// Currency of the counter party
	CounterPartyCurrency *string `json:"counterPartyCurrency"`
	// Counter party currency amount
	CounterPartyCurrencyAmount *string `json:"counterPartyCurrencyAmount"`
	// Name of the counter party
	CounterPartyName *string `json:"counterPartyName"`
	// Foreign exchange rate
	FxRate *string `json:"fxRate"`
	// Fees associated with the transaction
	Fees *string `json:"fees"`
	// Reference information
	Reference *string `json:"reference"`
	Typename  *string `json:"__typename"`
}

// GetAccountId returns Activity.AccountId, and is useful for accessing the field via an interface.
func (v *Activity) GetAccountId() string { return v.AccountId }

// GetAftOriginatorName returns Activity.AftOriginatorName, and is useful for accessing the field via an interface.
func (v *Activity) GetAftOriginatorName() *string { return v.AftOriginatorName }

// GetAftTransactionCategory returns Activity.AftTransactionCategory, and is useful for accessing the field via an interface.
func (v *Activity) GetAftTransactionCategory() *string { return v.AftTransactionCategory }

// GetAftTransactionType returns Activity.AftTransactionType, and is useful for accessing the field via an interface.
func (v *Activity) GetAftTransactionType() *string { return v.AftTransactionType }

// GetAmount returns Activity.Amount, and is useful for accessing the field via an interface.
func (v *Activity) GetAmount() string { return v.Amount }

// GetAmountSign returns Activity.AmountSign, and is useful for accessing the field via an interface.
func (v *Activity) GetAmountSign() string { return v.AmountSign }

// GetAssetQuantity returns Activity.AssetQuantity, and is useful for accessing the field via an interface.
func (v *Activity) GetAssetQuantity() string { return v.AssetQuantity }

// GetAssetSymbol returns Activity.AssetSymbol, and is useful for accessing the field via an interface.
func (v *Activity) GetAssetSymbol() *string { return v.AssetSymbol }

// GetCanonicalId returns Activity.CanonicalId, and is useful for accessing the field via an interface.
func (v *Activity) GetCanonicalId() *string { return v.CanonicalId }

// GetCurrency returns Activity.Currency, and is useful for accessing the field via an interface.
func (v *Activity) GetCurrency() *string { return v.Currency }

// GetETransferEmail returns Activity.ETransferEmail, and is useful for accessing the field via an interface.
func (v *Activity) GetETransferEmail() *string { return v.ETransferEmail }

// GetETransferName returns Activity.ETransferName, and is useful for accessing the field via an interface.
func (v *Activity) GetETransferName() *string { return v.ETransferName }

// GetExternalCanonicalId returns Activity.ExternalCanonicalId, and is useful for accessing the field via an interface.
func (v *Activity) GetExternalCanonicalId() *string { return v.ExternalCanonicalId }

// GetIdentityId returns Activity.IdentityId, and is useful for accessing the field via an interface.
func (v *Activity) GetIdentityId() *string { return v.IdentityId }

// GetInstitutionName returns Activity.InstitutionName, and is useful for accessing the field via an interface.
func (v *Activity) GetInstitutionName() *string { return v.InstitutionName }

// GetOccurredAt returns Activity.OccurredAt, and is useful for accessing the field via an interface.
func (v *Activity) GetOccurredAt() *time.Time { return v.OccurredAt }

// GetP2pHandle returns Activity.P2pHandle, and is useful for accessing the field via an interface.
func (v *Activity) GetP2pHandle() *string { return v.P2pHandle }

// GetP2pMessage returns Activity.P2pMessage, and is useful for accessing the field via an interface.
func (v *Activity) GetP2pMessage() *string { return v.P2pMessage }

// GetSpendMerchant returns Activity.SpendMerchant, and is useful for accessing the field via an interface.
func (v *Activity) GetSpendMerchant() *string { return v.SpendMerchant }

// GetSecurityId returns Activity.SecurityId, and is useful for accessing the field via an interface.
func (v *Activity) GetSecurityId() *string { return v.SecurityId }

// GetBillPayCompanyName returns Activity.BillPayCompanyName, and is useful for accessing the field via an interface.
func (v *Activity) GetBillPayCompanyName() *string { return v.BillPayCompanyName }

// GetBillPayPayeeNickname returns Activity.BillPayPayeeNickname, and is useful for accessing the field via an interface.
func (v *Activity) GetBillPayPayeeNickname() *string { return v.BillPayPayeeNickname }

// GetRedactedExternalAccountNumber returns Activity.RedactedExternalAccountNumber, and is useful for accessing the field via an interface.
func (v *Activity) GetRedactedExternalAccountNumber() *string { return v.RedactedExternalAccountNumber }

// GetOpposingAccountId returns Activity.OpposingAccountId, and is useful for accessing the field via an interface.
func (v *Activity) GetOpposingAccountId() *string { return v.OpposingAccountId }

// GetStatus returns Activity.Status, and is useful for accessing the field via an interface.
func (v *Activity) GetStatus() *string { return v.Status }

// GetSubType returns Activity.SubType, and is useful for accessing the field via an interface.
func (v *Activity) GetSubType() ActivitySubtype { return v.SubType }

// GetType returns Activity.Type, and is useful for accessing the field via an interface.
func (v *Activity) GetType() ActivityType { return v.Type }

// GetStrikePrice returns Activity.StrikePrice, and is useful for accessing the field via an interface.
func (v *Activity) GetStrikePrice() *string { return v.StrikePrice }

// GetContractType returns Activity.ContractType, and is useful for accessing the field via an interface.
func (v *Activity) GetContractType() *string { return v.ContractType }

// GetExpiryDate returns Activity.ExpiryDate, and is useful for accessing the field via an interface.
func (v *Activity) GetExpiryDate() *time.Time { return v.ExpiryDate }

// GetChequeNumber returns Activity.ChequeNumber, and is useful for accessing the field via an interface.
func (v *Activity) GetChequeNumber() *string { return v.ChequeNumber }

// GetProvisionalCreditAmount returns Activity.ProvisionalCreditAmount, and is useful for accessing the field via an interface.
func (v *Activity) GetProvisionalCreditAmount() *string { return v.ProvisionalCreditAmount }

// GetPrimaryBlocker returns Activity.PrimaryBlocker, and is useful for accessing the field via an interface.
func (v *Activity) GetPrimaryBlocker() *string { return v.PrimaryBlocker }

// GetInterestRate returns Activity.InterestRate, and is useful for accessing the field via an interface.
func (v *Activity) GetInterestRate() *string { return v.InterestRate }

// GetFrequency returns Activity.Frequency, and is useful for accessing the field via an interface.
func (v *Activity) GetFrequency() *string { return v.Frequency }

// GetCounterAssetSymbol returns Activity.CounterAssetSymbol, and is useful for accessing the field via an interface.
func (v *Activity) GetCounterAssetSymbol() *string { return v.CounterAssetSymbol }

// GetRewardProgram returns Activity.RewardProgram, and is useful for accessing the field via an interface.
func (v *Activity) GetRewardProgram() *string { return v.RewardProgram }

// GetCounterPartyCurrency returns Activity.CounterPartyCurrency, and is useful for accessing the field via an interface.
func (v *Activity) GetCounterPartyCurrency() *string { return v.CounterPartyCurrency }

// GetCounterPartyCurrencyAmount returns Activity.CounterPartyCurrencyAmount, and is useful for accessing the field via an interface.
func (v *Activity) GetCounterPartyCurrencyAmount() *string { return v.CounterPartyCurrencyAmount }

// GetCounterPartyName returns Activity.CounterPartyName, and is useful for accessing the field via an interface.
func (v *Activity) GetCounterPartyName() *string { return v.CounterPartyName }

// GetFxRate returns Activity.FxRate, and is useful for accessing the field via an interface.
func (v *Activity) GetFxRate() *string { return v.FxRate }

// GetFees returns Activity.Fees, and is useful for accessing the field via an interface.
func (v *Activity) GetFees() *string { return v.Fees }

// GetReference returns Activity.Reference, and is useful for accessing the field via an interface.
func (v *Activity) GetReference() *string { return v.Reference }

// GetTypename returns Activity.Typename, and is useful for accessing the field via an interface.
func (v *Activity) GetTypename() *string { return v.Typename }

func (v *Activity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Activity
		OccurredAt json.RawMessage `json:"occurredAt"`
		ExpiryDate json.RawMessage `json:"expiryDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Activity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.OccurredAt
		src := firstPass.OccurredAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Activity.OccurredAt: %w", err)
			}
		}
	}

	{
		dst := &v.ExpiryDate
		src := firstPass.ExpiryDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Activity.ExpiryDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalActivity struct {
	AccountId string `json:"accountId"`

	AftOriginatorName *string `json:"aftOriginatorName"`

	AftTransactionCategory *string `json:"aftTransactionCategory"`

	AftTransactionType *string `json:"aftTransactionType"`

	Amount string `json:"amount"`

	AmountSign string `json:"amountSign"`

	AssetQuantity string `json:"assetQuantity"`

	AssetSymbol *string `json:"assetSymbol"`

	CanonicalId *string `json:"canonicalId"`

	Currency *string `json:"currency"`

	ETransferEmail *string `json:"eTransferEmail"`

	ETransferName *string `json:"eTransferName"`

	ExternalCanonicalId *string `json:"externalCanonicalId"`

	IdentityId *string `json:"identityId"`

	InstitutionName *string `json:"institutionName"`

	OccurredAt json.RawMessage `json:"occurredAt"`

	P2pHandle *string `json:"p2pHandle"`

	P2pMessage *string `json:"p2pMessage"`

	SpendMerchant *string `json:"spendMerchant"`

	SecurityId *string `json:"securityId"`

	BillPayCompanyName *string `json:"billPayCompanyName"`

	BillPayPayeeNickname *string `json:"billPayPayeeNickname"`

	RedactedExternalAccountNumber *string `json:"redactedExternalAccountNumber"`

	OpposingAccountId *string `json:"opposingAccountId"`

	Status *string `json:"status"`

	SubType ActivitySubtype `json:"subType"`

	Type ActivityType `json:"type"`

	StrikePrice *string `json:"strikePrice"`

	ContractType *string `json:"contractType"`

	ExpiryDate json.RawMessage `json:"expiryDate"`

	ChequeNumber *string `json:"chequeNumber"`

	ProvisionalCreditAmount *string `json:"provisionalCreditAmount"`

	PrimaryBlocker *string `json:"primaryBlocker"`

	InterestRate *string `json:"interestRate"`

	Frequency *string `json:"frequency"`

	CounterAssetSymbol *string `json:"counterAssetSymbol"`

	RewardProgram *string `json:"rewardProgram"`

	CounterPartyCurrency *string `json:"counterPartyCurrency"`

	CounterPartyCurrencyAmount *string `json:"counterPartyCurrencyAmount"`

	CounterPartyName *string `json:"counterPartyName"`

	FxRate *string `json:"fxRate"`

	Fees *string `json:"fees"`

	Reference *string `json:"reference"`

	Typename *string `json:"__typename"`
}

func (v *Activity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Activity) __premarshalJSON() (*__premarshalActivity, error) {
	var retval __premarshalActivity

	retval.AccountId = v.AccountId
	retval.AftOriginatorName = v.AftOriginatorName
	retval.AftTransactionCategory = v.AftTransactionCategory
	retval.AftTransactionType = v.AftTransactionType
	retval.Amount = v.Amount
	retval.AmountSign = v.AmountSign
	retval.AssetQuantity = v.AssetQuantity
	retval.AssetSymbol = v.AssetSymbol
	retval.CanonicalId = v.CanonicalId
	retval.Currency = v.Currency
	retval.ETransferEmail = v.ETransferEmail
	retval.ETransferName = v.ETransferName
	retval.ExternalCanonicalId = v.ExternalCanonicalId
	retval.IdentityId = v.IdentityId
	retval.InstitutionName = v.InstitutionName
	{

		dst := &retval.OccurredAt
		src := v.OccurredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal Activity.OccurredAt: %w", err)
			}
		}
	}
	retval.P2pHandle = v.P2pHandle
	retval.P2pMessage = v.P2pMessage
	retval.SpendMerchant = v.SpendMerchant
	retval.SecurityId = v.SecurityId
	retval.BillPayCompanyName = v.BillPayCompanyName
	retval.BillPayPayeeNickname = v.BillPayPayeeNickname
	retval.RedactedExternalAccountNumber = v.RedactedExternalAccountNumber
	retval.OpposingAccountId = v.OpposingAccountId
	retval.Status = v.Status
	retval.SubType = v.SubType
	retval.Type = v.Type
	retval.StrikePrice = v.StrikePrice
	retval.ContractType = v.ContractType
	{

		dst := &retval.ExpiryDate
		src := v.ExpiryDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal Activity.ExpiryDate: %w", err)
			}
		}
	}
	retval.ChequeNumber = v.ChequeNumber
	retval.ProvisionalCreditAmount = v.ProvisionalCreditAmount
	retval.PrimaryBlocker = v.PrimaryBlocker
	retval.InterestRate = v.InterestRate
	retval.Frequency = v.Frequency
	retval.CounterAssetSymbol = v.CounterAssetSymbol
	retval.RewardProgram = v.RewardProgram
	retval.CounterPartyCurrency = v.CounterPartyCurrency
	retval.CounterPartyCurrencyAmount = v.CounterPartyCurrencyAmount
	retval.CounterPartyName = v.CounterPartyName
	retval.FxRate = v.FxRate
	retval.Fees = v.Fees
	retval.Reference = v.Reference
	retval.Typename = v.Typename
	return &retval, nil
}

// Input type to filter activity feed items
type ActivityCondition struct {
	// Filter by account ID
	AccountIds []string `json:"accountIds"`
	// Filter by date range
	EndDate *time.Time `json:"-"`
}

// GetAccountIds returns ActivityCondition.AccountIds, and is useful for accessing the field via an interface.
func (v *ActivityCondition) GetAccountIds() []string { return v.AccountIds }

// GetEndDate returns ActivityCondition.EndDate, and is useful for accessing the field via an interface.
func (v *ActivityCondition) GetEndDate() *time.Time { return v.EndDate }

func (v *ActivityCondition) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ActivityCondition
		EndDate json.RawMessage `json:"endDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ActivityCondition = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.EndDate
		src := firstPass.EndDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal ActivityCondition.EndDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalActivityCondition struct {
	AccountIds []string `json:"accountIds"`

	EndDate json.RawMessage `json:"endDate"`
}

func (v *ActivityCondition) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ActivityCondition) __premarshalJSON() (*__premarshalActivityCondition, error) {
	var retval __premarshalActivityCondition

	retval.AccountIds = v.AccountIds
	{

		dst := &retval.EndDate
		src := v.EndDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal ActivityCondition.EndDate: %w", err)
			}
		}
	}
	return &retval, nil
}

type ActivitySubtype string

const (
	ActivitySubtypeSource                 ActivitySubtype = "SOURCE"
	ActivitySubtypeETransfer              ActivitySubtype = "E_TRANSFER"
	ActivitySubtypeETransferFunding       ActivitySubtype = "E_TRANSFER_FUNDING"
	ActivitySubtypePaymentCardTransaction ActivitySubtype = "PAYMENT_CARD_TRANSACTION"
	ActivitySubtypeEft                    ActivitySubtype = "EFT"
	ActivitySubtypeAft                    ActivitySubtype = "AFT"
	ActivitySubtypeTransferFeeRefund      ActivitySubtype = "TRANSFER_FEE_REFUND"
	ActivitySubtypeTransferIn             ActivitySubtype = "TRANSFER_IN"
	ActivitySubtypeFplInterest            ActivitySubtype = "FPL_INTEREST"
	ActivitySubtypeBillPay                ActivitySubtype = "BILL_PAY"
	ActivitySubtypeSend                   ActivitySubtype = "SEND"
	ActivitySubtypeSendReceived           ActivitySubtype = "SEND_RECEIVED"
	ActivitySubtypeIncentiveBonus         ActivitySubtype = "INCENTIVE_BONUS"
)

type ActivityType string

const (
	ActivityTypeInternalTransfer            ActivityType = "INTERNAL_TRANSFER"
	ActivityTypeDiyBuy                      ActivityType = "DIY_BUY"
	ActivityTypeDiySell                     ActivityType = "DIY_SELL"
	ActivityTypeDeposit                     ActivityType = "DEPOSIT"
	ActivityTypeWithdrawal                  ActivityType = "WITHDRAWAL"
	ActivityTypeRefund                      ActivityType = "REFUND"
	ActivityTypeInstitutionalTransferIntent ActivityType = "INSTITUTIONAL_TRANSFER_INTENT"
	ActivityTypeInterest                    ActivityType = "INTEREST"
	ActivityTypeDividend                    ActivityType = "DIVIDEND"
	ActivityTypeFundsConversion             ActivityType = "FUNDS_CONVERSION"
	ActivityTypeNonResidentTax              ActivityType = "NON_RESIDENT_TAX"
	ActivityTypeP2pPayment                  ActivityType = "P2P_PAYMENT"
	ActivityTypePromotion                   ActivityType = "PROMOTION"
	ActivityTypeReferral                    ActivityType = "REFERRAL"
)

// AllAccountFinancials includes the GraphQL fields of Identity requested by the fragment AllAccountFinancials.
type AllAccountFinancials struct {
	Accounts *AllAccountFinancialsAccountsAccountConnection `json:"accounts"`
	Typename *string                                        `json:"__typename"`
}

// GetAccounts returns AllAccountFinancials.Accounts, and is useful for accessing the field via an interface.
func (v *AllAccountFinancials) GetAccounts() *AllAccountFinancialsAccountsAccountConnection {
	return v.Accounts
}

// GetTypename returns AllAccountFinancials.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountFinancials) GetTypename() *string { return v.Typename }

// AllAccountFinancialsAccountsAccountConnection includes the requested fields of the GraphQL type AccountConnection.
type AllAccountFinancialsAccountsAccountConnection struct {
	PageInfo AllAccountFinancialsAccountsAccountConnectionPageInfo           `json:"pageInfo"`
	Edges    []AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge `json:"edges"`
	Typename *string                                                         `json:"__typename"`
}

// GetPageInfo returns AllAccountFinancialsAccountsAccountConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnection) GetPageInfo() AllAccountFinancialsAccountsAccountConnectionPageInfo {
	return v.PageInfo
}

// GetEdges returns AllAccountFinancialsAccountsAccountConnection.Edges, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnection) GetEdges() []AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge {
	return v.Edges
}

// GetTypename returns AllAccountFinancialsAccountsAccountConnection.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnection) GetTypename() *string { return v.Typename }

// AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge includes the requested fields of the GraphQL type AccountEdge.
type AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge struct {
	Cursor   string                                                                   `json:"cursor"`
	Node     AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount `json:"node"`
	Typename *string                                                                  `json:"__typename"`
}

// GetCursor returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge) GetCursor() string {
	return v.Cursor
}

// GetNode returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge.Node, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge) GetNode() AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount {
	return v.Node
}

// GetTypename returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdge) GetTypename() *string {
	return v.Typename
}

// AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount includes the requested fields of the GraphQL type Account.
type AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount struct {
	AccountWithFinancials `json:"-"`
	Typename              *string `json:"__typename"`
}

// GetTypename returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetTypename() *string {
	return v.Typename
}

// GetLinkedAccount returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.LinkedAccount, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetLinkedAccount() *AccountWithLinkLinkedAccount {
	return v.AccountWithFinancials.AccountWithLink.LinkedAccount
}

// GetId returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Id, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetId() string {
	return v.AccountWithFinancials.AccountFinancials.Id
}

// GetCustodianAccounts returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.CustodianAccounts, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCustodianAccounts() []AccountFinancialsCustodianAccountsCustodianAccount {
	return v.AccountWithFinancials.AccountFinancials.CustodianAccounts
}

// GetFinancials returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Financials, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetFinancials() AccountFinancialsFinancialsAccountFinancials {
	return v.AccountWithFinancials.AccountFinancials.Financials
}

// GetArchivedAt returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.ArchivedAt, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetArchivedAt() *time.Time {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.ArchivedAt
}

// GetBranch returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Branch, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetBranch() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Branch
}

// GetClosedAt returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.ClosedAt, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetClosedAt() *time.Time {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.ClosedAt
}

// GetCreatedAt returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.CreatedAt, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCreatedAt() time.Time {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.CreatedAt
}

// GetCacheExpiredAt returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.CacheExpiredAt, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCacheExpiredAt() *time.Time {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.CacheExpiredAt
}

// GetCurrency returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Currency, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetCurrency() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Currency
}

// GetRequiredIdentityVerification returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.RequiredIdentityVerification, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetRequiredIdentityVerification() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.RequiredIdentityVerification
}

// GetUnifiedAccountType returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.UnifiedAccountType, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetUnifiedAccountType() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.UnifiedAccountType
}

// GetSupportedCurrencies returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.SupportedCurrencies, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetSupportedCurrencies() []string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.SupportedCurrencies
}

// GetNickname returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Nickname, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetNickname() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Nickname
}

// GetStatus returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Status, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetStatus() string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Status
}

// GetAccountOwnerConfiguration returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountOwnerConfiguration, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountOwnerConfiguration() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountOwnerConfiguration
}

// GetAccountFeatures returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountFeatures, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountFeatures() []AccountCoreAccountFeaturesAccountFeature {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountFeatures
}

// GetAccountOwners returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountOwners, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetAccountOwners() []AccountCoreAccountOwnersAccountOwner {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountOwners
}

// GetType returns AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.Type, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) GetType() *string {
	return v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Type
}

func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount
		graphql.NoUnmarshalJSON
	}
	firstPass.AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AccountWithFinancials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount struct {
	Typename *string `json:"__typename"`

	LinkedAccount *AccountWithLinkLinkedAccount `json:"linkedAccount"`

	Id string `json:"id"`

	CustodianAccounts []AccountFinancialsCustodianAccountsCustodianAccount `json:"custodianAccounts"`

	Financials AccountFinancialsFinancialsAccountFinancials `json:"financials"`

	ArchivedAt json.RawMessage `json:"archivedAt"`

	Branch *string `json:"branch"`

	ClosedAt json.RawMessage `json:"closedAt"`

	CreatedAt json.RawMessage `json:"createdAt"`

	CacheExpiredAt json.RawMessage `json:"cacheExpiredAt"`

	Currency *string `json:"currency"`

	RequiredIdentityVerification *string `json:"requiredIdentityVerification"`

	UnifiedAccountType *string `json:"unifiedAccountType"`

	SupportedCurrencies []string `json:"supportedCurrencies"`

	Nickname *string `json:"nickname"`

	Status string `json:"status"`

	AccountOwnerConfiguration *string `json:"accountOwnerConfiguration"`

	AccountFeatures []AccountCoreAccountFeaturesAccountFeature `json:"accountFeatures"`

	AccountOwners []AccountCoreAccountOwnersAccountOwner `json:"accountOwners"`

	Type *string `json:"type"`
}

func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount) __premarshalJSON() (*__premarshalAllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount, error) {
	var retval __premarshalAllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount

	retval.Typename = v.Typename
	retval.LinkedAccount = v.AccountWithFinancials.AccountWithLink.LinkedAccount
	retval.Id = v.AccountWithFinancials.AccountFinancials.Id
	retval.CustodianAccounts = v.AccountWithFinancials.AccountFinancials.CustodianAccounts
	retval.Financials = v.AccountWithFinancials.AccountFinancials.Financials
	{

		dst := &retval.ArchivedAt
		src := v.AccountWithFinancials.AccountWithLink.Account.AccountCore.ArchivedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountWithFinancials.AccountWithLink.Account.AccountCore.ArchivedAt: %w", err)
			}
		}
	}
	retval.Branch = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Branch
	{

		dst := &retval.ClosedAt
		src := v.AccountWithFinancials.AccountWithLink.Account.AccountCore.ClosedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountWithFinancials.AccountWithLink.Account.AccountCore.ClosedAt: %w", err)
			}
		}
	}
	{

		dst := &retval.CreatedAt
		src := v.AccountWithFinancials.AccountWithLink.Account.AccountCore.CreatedAt
		var err error
		*dst, err = marshalling.MarshalTimeToDateTime(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountWithFinancials.AccountWithLink.Account.AccountCore.CreatedAt: %w", err)
		}
	}
	{

		dst := &retval.CacheExpiredAt
		src := v.AccountWithFinancials.AccountWithLink.Account.AccountCore.CacheExpiredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal AllAccountFinancialsAccountsAccountConnectionEdgesAccountEdgeNodeAccount.AccountWithFinancials.AccountWithLink.Account.AccountCore.CacheExpiredAt: %w", err)
			}
		}
	}
	retval.Currency = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Currency
	retval.RequiredIdentityVerification = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.RequiredIdentityVerification
	retval.UnifiedAccountType = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.UnifiedAccountType
	retval.SupportedCurrencies = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.SupportedCurrencies
	retval.Nickname = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Nickname
	retval.Status = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Status
	retval.AccountOwnerConfiguration = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountOwnerConfiguration
	retval.AccountFeatures = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountFeatures
	retval.AccountOwners = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.AccountOwners
	retval.Type = v.AccountWithFinancials.AccountWithLink.Account.AccountCore.Type
	return &retval, nil
}

// AllAccountFinancialsAccountsAccountConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type AllAccountFinancialsAccountsAccountConnectionPageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   string  `json:"endCursor"`
	Typename    *string `json:"__typename"`
}

// GetHasNextPage returns AllAccountFinancialsAccountsAccountConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns AllAccountFinancialsAccountsAccountConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetTypename returns AllAccountFinancialsAccountsAccountConnectionPageInfo.Typename, and is useful for accessing the field via an interface.
func (v *AllAccountFinancialsAccountsAccountConnectionPageInfo) GetTypename() *string {
	return v.Typename
}

// CustodianAccount includes the GraphQL fields of CustodianAccount requested by the fragment CustodianAccount.
type CustodianAccount struct {
	Id        string     `json:"id"`
	Branch    *string    `json:"branch"`
	Custodian *string    `json:"custodian"`
	Status    string     `json:"status"`
	UpdatedAt *time.Time `json:"-"`
	Typename  *string    `json:"__typename"`
}

// GetId returns CustodianAccount.Id, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetId() string { return v.Id }

// GetBranch returns CustodianAccount.Branch, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetBranch() *string { return v.Branch }

// GetCustodian returns CustodianAccount.Custodian, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetCustodian() *string { return v.Custodian }

// GetStatus returns CustodianAccount.Status, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetStatus() string { return v.Status }

// GetUpdatedAt returns CustodianAccount.UpdatedAt, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetTypename returns CustodianAccount.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccount) GetTypename() *string { return v.Typename }

func (v *CustodianAccount) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccount
		UpdatedAt json.RawMessage `json:"updatedAt"`
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccount = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdatedAt
		src := firstPass.UpdatedAt
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal CustodianAccount.UpdatedAt: %w", err)
			}
		}
	}
	return nil
}

type __premarshalCustodianAccount struct {
	Id string `json:"id"`

	Branch *string `json:"branch"`

	Custodian *string `json:"custodian"`

	Status string `json:"status"`

	UpdatedAt json.RawMessage `json:"updatedAt"`

	Typename *string `json:"__typename"`
}

func (v *CustodianAccount) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccount) __premarshalJSON() (*__premarshalCustodianAccount, error) {
	var retval __premarshalCustodianAccount

	retval.Id = v.Id
	retval.Branch = v.Branch
	retval.Custodian = v.Custodian
	retval.Status = v.Status
	{

		dst := &retval.UpdatedAt
		src := v.UpdatedAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal CustodianAccount.UpdatedAt: %w", err)
			}
		}
	}
	retval.Typename = v.Typename
	return &retval, nil
}

// CustodianAccountCurrentFinancialValues includes the GraphQL fields of CustodianAccountCurrentFinancialValues requested by the fragment CustodianAccountCurrentFinancialValues.
type CustodianAccountCurrentFinancialValues struct {
	Deposits            CustodianAccountCurrentFinancialValuesDepositsMoney            `json:"deposits"`
	Earnings            CustodianAccountCurrentFinancialValuesEarningsMoney            `json:"earnings"`
	NetDeposits         CustodianAccountCurrentFinancialValuesNetDepositsMoney         `json:"netDeposits"`
	NetLiquidationValue CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney `json:"netLiquidationValue"`
	Withdrawals         CustodianAccountCurrentFinancialValuesWithdrawalsMoney         `json:"withdrawals"`
	Typename            *string                                                        `json:"__typename"`
}

// GetDeposits returns CustodianAccountCurrentFinancialValues.Deposits, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetDeposits() CustodianAccountCurrentFinancialValuesDepositsMoney {
	return v.Deposits
}

// GetEarnings returns CustodianAccountCurrentFinancialValues.Earnings, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetEarnings() CustodianAccountCurrentFinancialValuesEarningsMoney {
	return v.Earnings
}

// GetNetDeposits returns CustodianAccountCurrentFinancialValues.NetDeposits, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetNetDeposits() CustodianAccountCurrentFinancialValuesNetDepositsMoney {
	return v.NetDeposits
}

// GetNetLiquidationValue returns CustodianAccountCurrentFinancialValues.NetLiquidationValue, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetNetLiquidationValue() CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney {
	return v.NetLiquidationValue
}

// GetWithdrawals returns CustodianAccountCurrentFinancialValues.Withdrawals, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetWithdrawals() CustodianAccountCurrentFinancialValuesWithdrawalsMoney {
	return v.Withdrawals
}

// GetTypename returns CustodianAccountCurrentFinancialValues.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValues) GetTypename() *string { return v.Typename }

// CustodianAccountCurrentFinancialValuesDepositsMoney includes the requested fields of the GraphQL type Money.
type CustodianAccountCurrentFinancialValuesDepositsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns CustodianAccountCurrentFinancialValuesDepositsMoney.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) GetTypename() *string {
	return v.Typename
}

// GetAmount returns CustodianAccountCurrentFinancialValuesDepositsMoney.Amount, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns CustodianAccountCurrentFinancialValuesDepositsMoney.Cents, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns CustodianAccountCurrentFinancialValuesDepositsMoney.Currency, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) GetCurrency() string {
	return v.Money.Currency
}

func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccountCurrentFinancialValuesDepositsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccountCurrentFinancialValuesDepositsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCustodianAccountCurrentFinancialValuesDepositsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccountCurrentFinancialValuesDepositsMoney) __premarshalJSON() (*__premarshalCustodianAccountCurrentFinancialValuesDepositsMoney, error) {
	var retval __premarshalCustodianAccountCurrentFinancialValuesDepositsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// CustodianAccountCurrentFinancialValuesEarningsMoney includes the requested fields of the GraphQL type Money.
type CustodianAccountCurrentFinancialValuesEarningsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns CustodianAccountCurrentFinancialValuesEarningsMoney.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) GetTypename() *string {
	return v.Typename
}

// GetAmount returns CustodianAccountCurrentFinancialValuesEarningsMoney.Amount, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns CustodianAccountCurrentFinancialValuesEarningsMoney.Cents, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns CustodianAccountCurrentFinancialValuesEarningsMoney.Currency, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) GetCurrency() string {
	return v.Money.Currency
}

func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccountCurrentFinancialValuesEarningsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccountCurrentFinancialValuesEarningsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCustodianAccountCurrentFinancialValuesEarningsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccountCurrentFinancialValuesEarningsMoney) __premarshalJSON() (*__premarshalCustodianAccountCurrentFinancialValuesEarningsMoney, error) {
	var retval __premarshalCustodianAccountCurrentFinancialValuesEarningsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// CustodianAccountCurrentFinancialValuesNetDepositsMoney includes the requested fields of the GraphQL type Money.
type CustodianAccountCurrentFinancialValuesNetDepositsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns CustodianAccountCurrentFinancialValuesNetDepositsMoney.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) GetTypename() *string {
	return v.Typename
}

// GetAmount returns CustodianAccountCurrentFinancialValuesNetDepositsMoney.Amount, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns CustodianAccountCurrentFinancialValuesNetDepositsMoney.Cents, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns CustodianAccountCurrentFinancialValuesNetDepositsMoney.Currency, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) GetCurrency() string {
	return v.Money.Currency
}

func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccountCurrentFinancialValuesNetDepositsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccountCurrentFinancialValuesNetDepositsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCustodianAccountCurrentFinancialValuesNetDepositsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccountCurrentFinancialValuesNetDepositsMoney) __premarshalJSON() (*__premarshalCustodianAccountCurrentFinancialValuesNetDepositsMoney, error) {
	var retval __premarshalCustodianAccountCurrentFinancialValuesNetDepositsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney includes the requested fields of the GraphQL type Money.
type CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) GetTypename() *string {
	return v.Typename
}

// GetAmount returns CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney.Amount, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney.Cents, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) GetCents() int {
	return v.Money.Cents
}

// GetCurrency returns CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney.Currency, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) GetCurrency() string {
	return v.Money.Currency
}

func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCustodianAccountCurrentFinancialValuesNetLiquidationValueMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccountCurrentFinancialValuesNetLiquidationValueMoney) __premarshalJSON() (*__premarshalCustodianAccountCurrentFinancialValuesNetLiquidationValueMoney, error) {
	var retval __premarshalCustodianAccountCurrentFinancialValuesNetLiquidationValueMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// CustodianAccountCurrentFinancialValuesWithdrawalsMoney includes the requested fields of the GraphQL type Money.
type CustodianAccountCurrentFinancialValuesWithdrawalsMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns CustodianAccountCurrentFinancialValuesWithdrawalsMoney.Typename, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) GetTypename() *string {
	return v.Typename
}

// GetAmount returns CustodianAccountCurrentFinancialValuesWithdrawalsMoney.Amount, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) GetAmount() string {
	return v.Money.Amount
}

// GetCents returns CustodianAccountCurrentFinancialValuesWithdrawalsMoney.Cents, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns CustodianAccountCurrentFinancialValuesWithdrawalsMoney.Currency, and is useful for accessing the field via an interface.
func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) GetCurrency() string {
	return v.Money.Currency
}

func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CustodianAccountCurrentFinancialValuesWithdrawalsMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.CustodianAccountCurrentFinancialValuesWithdrawalsMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCustodianAccountCurrentFinancialValuesWithdrawalsMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CustodianAccountCurrentFinancialValuesWithdrawalsMoney) __premarshalJSON() (*__premarshalCustodianAccountCurrentFinancialValuesWithdrawalsMoney, error) {
	var retval __premarshalCustodianAccountCurrentFinancialValuesWithdrawalsMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection includes the requested fields of the GraphQL type ActivityFeedItemConnection.
// The GraphQL type's documentation follows.
//
// Connection type for activity feed items implementing cursor-based pagination
type FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection struct {
	// List of activity feed item edges
	Edges []FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge `json:"edges"`
	// Pagination information
	PageInfo FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo `json:"pageInfo"`
	Typename *string                                                                   `json:"__typename"`
}

// GetEdges returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection.Edges, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection) GetEdges() []FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge {
	return v.Edges
}

// GetPageInfo returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection) GetPageInfo() FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo {
	return v.PageInfo
}

// GetTypename returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection) GetTypename() *string {
	return v.Typename
}

// FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge includes the requested fields of the GraphQL type ActivityFeedItemEdge.
// The GraphQL type's documentation follows.
//
// Edge type for activity feed items
type FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge struct {
	// The activity feed item
	Node     FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem `json:"node"`
	Typename *string                                                                                                        `json:"__typename"`
}

// GetNode returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge.Node, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge) GetNode() FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem {
	return v.Node
}

// GetTypename returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdge) GetTypename() *string {
	return v.Typename
}

// FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem includes the requested fields of the GraphQL type ActivityFeedItem.
// The GraphQL type's documentation follows.
//
// Activity feed item representing various financial activities
type FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem struct {
	Activity `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetTypename() *string {
	return v.Typename
}

// GetAccountId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AccountId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAccountId() string {
	return v.Activity.AccountId
}

// GetAftOriginatorName returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AftOriginatorName, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAftOriginatorName() *string {
	return v.Activity.AftOriginatorName
}

// GetAftTransactionCategory returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AftTransactionCategory, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAftTransactionCategory() *string {
	return v.Activity.AftTransactionCategory
}

// GetAftTransactionType returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AftTransactionType, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAftTransactionType() *string {
	return v.Activity.AftTransactionType
}

// GetAmount returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Amount, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAmount() string {
	return v.Activity.Amount
}

// GetAmountSign returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AmountSign, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAmountSign() string {
	return v.Activity.AmountSign
}

// GetAssetQuantity returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AssetQuantity, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAssetQuantity() string {
	return v.Activity.AssetQuantity
}

// GetAssetSymbol returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.AssetSymbol, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetAssetSymbol() *string {
	return v.Activity.AssetSymbol
}

// GetCanonicalId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.CanonicalId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCanonicalId() *string {
	return v.Activity.CanonicalId
}

// GetCurrency returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Currency, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCurrency() *string {
	return v.Activity.Currency
}

// GetETransferEmail returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ETransferEmail, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetETransferEmail() *string {
	return v.Activity.ETransferEmail
}

// GetETransferName returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ETransferName, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetETransferName() *string {
	return v.Activity.ETransferName
}

// GetExternalCanonicalId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ExternalCanonicalId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetExternalCanonicalId() *string {
	return v.Activity.ExternalCanonicalId
}

// GetIdentityId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.IdentityId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetIdentityId() *string {
	return v.Activity.IdentityId
}

// GetInstitutionName returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.InstitutionName, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetInstitutionName() *string {
	return v.Activity.InstitutionName
}

// GetOccurredAt returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.OccurredAt, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetOccurredAt() *time.Time {
	return v.Activity.OccurredAt
}

// GetP2pHandle returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.P2pHandle, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetP2pHandle() *string {
	return v.Activity.P2pHandle
}

// GetP2pMessage returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.P2pMessage, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetP2pMessage() *string {
	return v.Activity.P2pMessage
}

// GetSpendMerchant returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.SpendMerchant, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetSpendMerchant() *string {
	return v.Activity.SpendMerchant
}

// GetSecurityId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.SecurityId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetSecurityId() *string {
	return v.Activity.SecurityId
}

// GetBillPayCompanyName returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.BillPayCompanyName, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetBillPayCompanyName() *string {
	return v.Activity.BillPayCompanyName
}

// GetBillPayPayeeNickname returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.BillPayPayeeNickname, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetBillPayPayeeNickname() *string {
	return v.Activity.BillPayPayeeNickname
}

// GetRedactedExternalAccountNumber returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.RedactedExternalAccountNumber, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetRedactedExternalAccountNumber() *string {
	return v.Activity.RedactedExternalAccountNumber
}

// GetOpposingAccountId returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.OpposingAccountId, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetOpposingAccountId() *string {
	return v.Activity.OpposingAccountId
}

// GetStatus returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Status, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetStatus() *string {
	return v.Activity.Status
}

// GetSubType returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.SubType, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetSubType() ActivitySubtype {
	return v.Activity.SubType
}

// GetType returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Type, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetType() ActivityType {
	return v.Activity.Type
}

// GetStrikePrice returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.StrikePrice, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetStrikePrice() *string {
	return v.Activity.StrikePrice
}

// GetContractType returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ContractType, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetContractType() *string {
	return v.Activity.ContractType
}

// GetExpiryDate returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ExpiryDate, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetExpiryDate() *time.Time {
	return v.Activity.ExpiryDate
}

// GetChequeNumber returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ChequeNumber, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetChequeNumber() *string {
	return v.Activity.ChequeNumber
}

// GetProvisionalCreditAmount returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.ProvisionalCreditAmount, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetProvisionalCreditAmount() *string {
	return v.Activity.ProvisionalCreditAmount
}

// GetPrimaryBlocker returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.PrimaryBlocker, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetPrimaryBlocker() *string {
	return v.Activity.PrimaryBlocker
}

// GetInterestRate returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.InterestRate, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetInterestRate() *string {
	return v.Activity.InterestRate
}

// GetFrequency returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Frequency, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetFrequency() *string {
	return v.Activity.Frequency
}

// GetCounterAssetSymbol returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.CounterAssetSymbol, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCounterAssetSymbol() *string {
	return v.Activity.CounterAssetSymbol
}

// GetRewardProgram returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.RewardProgram, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetRewardProgram() *string {
	return v.Activity.RewardProgram
}

// GetCounterPartyCurrency returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.CounterPartyCurrency, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCounterPartyCurrency() *string {
	return v.Activity.CounterPartyCurrency
}

// GetCounterPartyCurrencyAmount returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.CounterPartyCurrencyAmount, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCounterPartyCurrencyAmount() *string {
	return v.Activity.CounterPartyCurrencyAmount
}

// GetCounterPartyName returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.CounterPartyName, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetCounterPartyName() *string {
	return v.Activity.CounterPartyName
}

// GetFxRate returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.FxRate, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetFxRate() *string {
	return v.Activity.FxRate
}

// GetFees returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Fees, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetFees() *string {
	return v.Activity.Fees
}

// GetReference returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Reference, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) GetReference() *string {
	return v.Activity.Reference
}

func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem
		graphql.NoUnmarshalJSON
	}
	firstPass.FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Activity)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem struct {
	Typename *string `json:"__typename"`

	AccountId string `json:"accountId"`

	AftOriginatorName *string `json:"aftOriginatorName"`

	AftTransactionCategory *string `json:"aftTransactionCategory"`

	AftTransactionType *string `json:"aftTransactionType"`

	Amount string `json:"amount"`

	AmountSign string `json:"amountSign"`

	AssetQuantity string `json:"assetQuantity"`

	AssetSymbol *string `json:"assetSymbol"`

	CanonicalId *string `json:"canonicalId"`

	Currency *string `json:"currency"`

	ETransferEmail *string `json:"eTransferEmail"`

	ETransferName *string `json:"eTransferName"`

	ExternalCanonicalId *string `json:"externalCanonicalId"`

	IdentityId *string `json:"identityId"`

	InstitutionName *string `json:"institutionName"`

	OccurredAt json.RawMessage `json:"occurredAt"`

	P2pHandle *string `json:"p2pHandle"`

	P2pMessage *string `json:"p2pMessage"`

	SpendMerchant *string `json:"spendMerchant"`

	SecurityId *string `json:"securityId"`

	BillPayCompanyName *string `json:"billPayCompanyName"`

	BillPayPayeeNickname *string `json:"billPayPayeeNickname"`

	RedactedExternalAccountNumber *string `json:"redactedExternalAccountNumber"`

	OpposingAccountId *string `json:"opposingAccountId"`

	Status *string `json:"status"`

	SubType ActivitySubtype `json:"subType"`

	Type ActivityType `json:"type"`

	StrikePrice *string `json:"strikePrice"`

	ContractType *string `json:"contractType"`

	ExpiryDate json.RawMessage `json:"expiryDate"`

	ChequeNumber *string `json:"chequeNumber"`

	ProvisionalCreditAmount *string `json:"provisionalCreditAmount"`

	PrimaryBlocker *string `json:"primaryBlocker"`

	InterestRate *string `json:"interestRate"`

	Frequency *string `json:"frequency"`

	CounterAssetSymbol *string `json:"counterAssetSymbol"`

	RewardProgram *string `json:"rewardProgram"`

	CounterPartyCurrency *string `json:"counterPartyCurrency"`

	CounterPartyCurrencyAmount *string `json:"counterPartyCurrencyAmount"`

	CounterPartyName *string `json:"counterPartyName"`

	FxRate *string `json:"fxRate"`

	Fees *string `json:"fees"`

	Reference *string `json:"reference"`
}

func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem) __premarshalJSON() (*__premarshalFetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem, error) {
	var retval __premarshalFetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem

	retval.Typename = v.Typename
	retval.AccountId = v.Activity.AccountId
	retval.AftOriginatorName = v.Activity.AftOriginatorName
	retval.AftTransactionCategory = v.Activity.AftTransactionCategory
	retval.AftTransactionType = v.Activity.AftTransactionType
	retval.Amount = v.Activity.Amount
	retval.AmountSign = v.Activity.AmountSign
	retval.AssetQuantity = v.Activity.AssetQuantity
	retval.AssetSymbol = v.Activity.AssetSymbol
	retval.CanonicalId = v.Activity.CanonicalId
	retval.Currency = v.Activity.Currency
	retval.ETransferEmail = v.Activity.ETransferEmail
	retval.ETransferName = v.Activity.ETransferName
	retval.ExternalCanonicalId = v.Activity.ExternalCanonicalId
	retval.IdentityId = v.Activity.IdentityId
	retval.InstitutionName = v.Activity.InstitutionName
	{

		dst := &retval.OccurredAt
		src := v.Activity.OccurredAt
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Activity.OccurredAt: %w", err)
			}
		}
	}
	retval.P2pHandle = v.Activity.P2pHandle
	retval.P2pMessage = v.Activity.P2pMessage
	retval.SpendMerchant = v.Activity.SpendMerchant
	retval.SecurityId = v.Activity.SecurityId
	retval.BillPayCompanyName = v.Activity.BillPayCompanyName
	retval.BillPayPayeeNickname = v.Activity.BillPayPayeeNickname
	retval.RedactedExternalAccountNumber = v.Activity.RedactedExternalAccountNumber
	retval.OpposingAccountId = v.Activity.OpposingAccountId
	retval.Status = v.Activity.Status
	retval.SubType = v.Activity.SubType
	retval.Type = v.Activity.Type
	retval.StrikePrice = v.Activity.StrikePrice
	retval.ContractType = v.Activity.ContractType
	{

		dst := &retval.ExpiryDate
		src := v.Activity.ExpiryDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionEdgesActivityFeedItemEdgeNodeActivityFeedItem.Activity.ExpiryDate: %w", err)
			}
		}
	}
	retval.ChequeNumber = v.Activity.ChequeNumber
	retval.ProvisionalCreditAmount = v.Activity.ProvisionalCreditAmount
	retval.PrimaryBlocker = v.Activity.PrimaryBlocker
	retval.InterestRate = v.Activity.InterestRate
	retval.Frequency = v.Activity.Frequency
	retval.CounterAssetSymbol = v.Activity.CounterAssetSymbol
	retval.RewardProgram = v.Activity.RewardProgram
	retval.CounterPartyCurrency = v.Activity.CounterPartyCurrency
	retval.CounterPartyCurrencyAmount = v.Activity.CounterPartyCurrencyAmount
	retval.CounterPartyName = v.Activity.CounterPartyName
	retval.FxRate = v.Activity.FxRate
	retval.Fees = v.Activity.Fees
	retval.Reference = v.Activity.Reference
	return &retval, nil
}

// FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo struct {
	HasNextPage bool    `json:"hasNextPage"`
	EndCursor   string  `json:"endCursor"`
	Typename    *string `json:"__typename"`
}

// GetHasNextPage returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo) GetHasNextPage() bool {
	return v.HasNextPage
}

// GetEndCursor returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo) GetEndCursor() string {
	return v.EndCursor
}

// GetTypename returns FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo.Typename, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnectionPageInfo) GetTypename() *string {
	return v.Typename
}

// FetchActivityFeedItemsResponse is returned by FetchActivityFeedItems on success.
type FetchActivityFeedItemsResponse struct {
	ActivityFeedItems *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection `json:"activityFeedItems"`
}

// GetActivityFeedItems returns FetchActivityFeedItemsResponse.ActivityFeedItems, and is useful for accessing the field via an interface.
func (v *FetchActivityFeedItemsResponse) GetActivityFeedItems() *FetchActivityFeedItemsActivityFeedItemsActivityFeedItemConnection {
	return v.ActivityFeedItems
}

// FetchAllAccountFinancialsIdentity includes the requested fields of the GraphQL type Identity.
type FetchAllAccountFinancialsIdentity struct {
	Id                   string `json:"id"`
	AllAccountFinancials `json:"-"`
	Typename             *string `json:"__typename"`
}

// GetId returns FetchAllAccountFinancialsIdentity.Id, and is useful for accessing the field via an interface.
func (v *FetchAllAccountFinancialsIdentity) GetId() string { return v.Id }

// GetTypename returns FetchAllAccountFinancialsIdentity.Typename, and is useful for accessing the field via an interface.
func (v *FetchAllAccountFinancialsIdentity) GetTypename() *string { return v.Typename }

// GetAccounts returns FetchAllAccountFinancialsIdentity.Accounts, and is useful for accessing the field via an interface.
func (v *FetchAllAccountFinancialsIdentity) GetAccounts() *AllAccountFinancialsAccountsAccountConnection {
	return v.AllAccountFinancials.Accounts
}

func (v *FetchAllAccountFinancialsIdentity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FetchAllAccountFinancialsIdentity
		graphql.NoUnmarshalJSON
	}
	firstPass.FetchAllAccountFinancialsIdentity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AllAccountFinancials)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFetchAllAccountFinancialsIdentity struct {
	Id string `json:"id"`

	Typename *string `json:"__typename"`

	Accounts *AllAccountFinancialsAccountsAccountConnection `json:"accounts"`
}

func (v *FetchAllAccountFinancialsIdentity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FetchAllAccountFinancialsIdentity) __premarshalJSON() (*__premarshalFetchAllAccountFinancialsIdentity, error) {
	var retval __premarshalFetchAllAccountFinancialsIdentity

	retval.Id = v.Id
	retval.Typename = v.Typename
	retval.Accounts = v.AllAccountFinancials.Accounts
	return &retval, nil
}

// FetchAllAccountFinancialsResponse is returned by FetchAllAccountFinancials on success.
type FetchAllAccountFinancialsResponse struct {
	Identity FetchAllAccountFinancialsIdentity `json:"identity"`
}

// GetIdentity returns FetchAllAccountFinancialsResponse.Identity, and is useful for accessing the field via an interface.
func (v *FetchAllAccountFinancialsResponse) GetIdentity() FetchAllAccountFinancialsIdentity {
	return v.Identity
}

// FetchSecurityMarketDataResponse is returned by FetchSecurityMarketData on success.
type FetchSecurityMarketDataResponse struct {
	Security FetchSecurityMarketDataSecurity `json:"security"`
}

// GetSecurity returns FetchSecurityMarketDataResponse.Security, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataResponse) GetSecurity() FetchSecurityMarketDataSecurity {
	return v.Security
}

// FetchSecurityMarketDataSecurity includes the requested fields of the GraphQL type Security.
type FetchSecurityMarketDataSecurity struct {
	Id                 string `json:"id"`
	SecurityMarketData `json:"-"`
	Typename           *string `json:"__typename"`
}

// GetId returns FetchSecurityMarketDataSecurity.Id, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetId() string { return v.Id }

// GetTypename returns FetchSecurityMarketDataSecurity.Typename, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetTypename() *string { return v.Typename }

// GetAllowedOrderSubtypes returns FetchSecurityMarketDataSecurity.AllowedOrderSubtypes, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetAllowedOrderSubtypes() []string {
	return v.SecurityMarketData.AllowedOrderSubtypes
}

// GetMarginRates returns FetchSecurityMarketDataSecurity.MarginRates, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetMarginRates() *SecurityMarketDataMarginRates {
	return v.SecurityMarketData.MarginRates
}

// GetFundamentals returns FetchSecurityMarketDataSecurity.Fundamentals, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetFundamentals() *SecurityMarketDataFundamentals {
	return v.SecurityMarketData.Fundamentals
}

// GetQuote returns FetchSecurityMarketDataSecurity.Quote, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetQuote() *SecurityMarketDataQuote {
	return v.SecurityMarketData.Quote
}

// GetStock returns FetchSecurityMarketDataSecurity.Stock, and is useful for accessing the field via an interface.
func (v *FetchSecurityMarketDataSecurity) GetStock() *SecurityMarketDataStock {
	return v.SecurityMarketData.Stock
}

func (v *FetchSecurityMarketDataSecurity) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FetchSecurityMarketDataSecurity
		graphql.NoUnmarshalJSON
	}
	firstPass.FetchSecurityMarketDataSecurity = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.SecurityMarketData)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalFetchSecurityMarketDataSecurity struct {
	Id string `json:"id"`

	Typename *string `json:"__typename"`

	AllowedOrderSubtypes []string `json:"allowedOrderSubtypes"`

	MarginRates *SecurityMarketDataMarginRates `json:"marginRates"`

	Fundamentals *SecurityMarketDataFundamentals `json:"fundamentals"`

	Quote *SecurityMarketDataQuote `json:"quote"`

	Stock *SecurityMarketDataStock `json:"stock"`
}

func (v *FetchSecurityMarketDataSecurity) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FetchSecurityMarketDataSecurity) __premarshalJSON() (*__premarshalFetchSecurityMarketDataSecurity, error) {
	var retval __premarshalFetchSecurityMarketDataSecurity

	retval.Id = v.Id
	retval.Typename = v.Typename
	retval.AllowedOrderSubtypes = v.SecurityMarketData.AllowedOrderSubtypes
	retval.MarginRates = v.SecurityMarketData.MarginRates
	retval.Fundamentals = v.SecurityMarketData.Fundamentals
	retval.Quote = v.SecurityMarketData.Quote
	retval.Stock = v.SecurityMarketData.Stock
	return &retval, nil
}

// MarginRates includes the GraphQL fields of MarginRates requested by the fragment MarginRates.
type MarginRates struct {
	ClientMarginRate float64 `json:"clientMarginRate"`
	Typename         *string `json:"__typename"`
}

// GetClientMarginRate returns MarginRates.ClientMarginRate, and is useful for accessing the field via an interface.
func (v *MarginRates) GetClientMarginRate() float64 { return v.ClientMarginRate }

// GetTypename returns MarginRates.Typename, and is useful for accessing the field via an interface.
func (v *MarginRates) GetTypename() *string { return v.Typename }

// Money includes the GraphQL fields of Money requested by the fragment Money.
type Money struct {
	Amount   string  `json:"amount"`
	Cents    int     `json:"cents"`
	Currency string  `json:"currency"`
	Typename *string `json:"__typename"`
}

// GetAmount returns Money.Amount, and is useful for accessing the field via an interface.
func (v *Money) GetAmount() string { return v.Amount }

// GetCents returns Money.Cents, and is useful for accessing the field via an interface.
func (v *Money) GetCents() int { return v.Cents }

// GetCurrency returns Money.Currency, and is useful for accessing the field via an interface.
func (v *Money) GetCurrency() string { return v.Currency }

// GetTypename returns Money.Typename, and is useful for accessing the field via an interface.
func (v *Money) GetTypename() *string { return v.Typename }

// SecurityMarketData includes the GraphQL fields of Security requested by the fragment SecurityMarketData.
type SecurityMarketData struct {
	Id                   string                          `json:"id"`
	AllowedOrderSubtypes []string                        `json:"allowedOrderSubtypes"`
	MarginRates          *SecurityMarketDataMarginRates  `json:"marginRates"`
	Fundamentals         *SecurityMarketDataFundamentals `json:"fundamentals"`
	Quote                *SecurityMarketDataQuote        `json:"quote"`
	Stock                *SecurityMarketDataStock        `json:"stock"`
	Typename             *string                         `json:"__typename"`
}

// GetId returns SecurityMarketData.Id, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetId() string { return v.Id }

// GetAllowedOrderSubtypes returns SecurityMarketData.AllowedOrderSubtypes, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetAllowedOrderSubtypes() []string { return v.AllowedOrderSubtypes }

// GetMarginRates returns SecurityMarketData.MarginRates, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetMarginRates() *SecurityMarketDataMarginRates { return v.MarginRates }

// GetFundamentals returns SecurityMarketData.Fundamentals, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetFundamentals() *SecurityMarketDataFundamentals { return v.Fundamentals }

// GetQuote returns SecurityMarketData.Quote, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetQuote() *SecurityMarketDataQuote { return v.Quote }

// GetStock returns SecurityMarketData.Stock, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetStock() *SecurityMarketDataStock { return v.Stock }

// GetTypename returns SecurityMarketData.Typename, and is useful for accessing the field via an interface.
func (v *SecurityMarketData) GetTypename() *string { return v.Typename }

// SecurityMarketDataFundamentals includes the requested fields of the GraphQL type Fundamentals.
type SecurityMarketDataFundamentals struct {
	AvgVolume   float64 `json:"avgVolume"`
	High52Week  float64 `json:"high52Week"`
	Low52Week   float64 `json:"low52Week"`
	Yield       float64 `json:"yield"`
	PeRatio     float64 `json:"peRatio"`
	MarketCap   float64 `json:"marketCap"`
	Currency    string  `json:"currency"`
	Description *string `json:"description"`
	Typename    *string `json:"__typename"`
}

// GetAvgVolume returns SecurityMarketDataFundamentals.AvgVolume, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetAvgVolume() float64 { return v.AvgVolume }

// GetHigh52Week returns SecurityMarketDataFundamentals.High52Week, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetHigh52Week() float64 { return v.High52Week }

// GetLow52Week returns SecurityMarketDataFundamentals.Low52Week, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetLow52Week() float64 { return v.Low52Week }

// GetYield returns SecurityMarketDataFundamentals.Yield, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetYield() float64 { return v.Yield }

// GetPeRatio returns SecurityMarketDataFundamentals.PeRatio, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetPeRatio() float64 { return v.PeRatio }

// GetMarketCap returns SecurityMarketDataFundamentals.MarketCap, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetMarketCap() float64 { return v.MarketCap }

// GetCurrency returns SecurityMarketDataFundamentals.Currency, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetCurrency() string { return v.Currency }

// GetDescription returns SecurityMarketDataFundamentals.Description, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetDescription() *string { return v.Description }

// GetTypename returns SecurityMarketDataFundamentals.Typename, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataFundamentals) GetTypename() *string { return v.Typename }

// SecurityMarketDataMarginRates includes the requested fields of the GraphQL type MarginRates.
type SecurityMarketDataMarginRates struct {
	MarginRates `json:"-"`
	Typename    *string `json:"__typename"`
}

// GetTypename returns SecurityMarketDataMarginRates.Typename, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataMarginRates) GetTypename() *string { return v.Typename }

// GetClientMarginRate returns SecurityMarketDataMarginRates.ClientMarginRate, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataMarginRates) GetClientMarginRate() float64 {
	return v.MarginRates.ClientMarginRate
}

func (v *SecurityMarketDataMarginRates) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SecurityMarketDataMarginRates
		graphql.NoUnmarshalJSON
	}
	firstPass.SecurityMarketDataMarginRates = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MarginRates)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSecurityMarketDataMarginRates struct {
	Typename *string `json:"__typename"`

	ClientMarginRate float64 `json:"clientMarginRate"`
}

func (v *SecurityMarketDataMarginRates) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SecurityMarketDataMarginRates) __premarshalJSON() (*__premarshalSecurityMarketDataMarginRates, error) {
	var retval __premarshalSecurityMarketDataMarginRates

	retval.Typename = v.Typename
	retval.ClientMarginRate = v.MarginRates.ClientMarginRate
	return &retval, nil
}

// SecurityMarketDataQuote includes the requested fields of the GraphQL type Quote.
type SecurityMarketDataQuote struct {
	Bid           string     `json:"bid"`
	Ask           string     `json:"ask"`
	Open          string     `json:"open"`
	High          string     `json:"high"`
	Low           string     `json:"low"`
	Volume        int        `json:"volume"`
	AskSize       int        `json:"askSize"`
	BidSize       int        `json:"bidSize"`
	Last          string     `json:"last"`
	LastSize      int        `json:"lastSize"`
	QuotedAsOf    *time.Time `json:"-"`
	QuoteDate     *time.Time `json:"-"`
	Amount        string     `json:"amount"`
	PreviousClose string     `json:"previousClose"`
	Typename      *string    `json:"__typename"`
}

// GetBid returns SecurityMarketDataQuote.Bid, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetBid() string { return v.Bid }

// GetAsk returns SecurityMarketDataQuote.Ask, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetAsk() string { return v.Ask }

// GetOpen returns SecurityMarketDataQuote.Open, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetOpen() string { return v.Open }

// GetHigh returns SecurityMarketDataQuote.High, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetHigh() string { return v.High }

// GetLow returns SecurityMarketDataQuote.Low, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetLow() string { return v.Low }

// GetVolume returns SecurityMarketDataQuote.Volume, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetVolume() int { return v.Volume }

// GetAskSize returns SecurityMarketDataQuote.AskSize, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetAskSize() int { return v.AskSize }

// GetBidSize returns SecurityMarketDataQuote.BidSize, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetBidSize() int { return v.BidSize }

// GetLast returns SecurityMarketDataQuote.Last, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetLast() string { return v.Last }

// GetLastSize returns SecurityMarketDataQuote.LastSize, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetLastSize() int { return v.LastSize }

// GetQuotedAsOf returns SecurityMarketDataQuote.QuotedAsOf, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetQuotedAsOf() *time.Time { return v.QuotedAsOf }

// GetQuoteDate returns SecurityMarketDataQuote.QuoteDate, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetQuoteDate() *time.Time { return v.QuoteDate }

// GetAmount returns SecurityMarketDataQuote.Amount, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetAmount() string { return v.Amount }

// GetPreviousClose returns SecurityMarketDataQuote.PreviousClose, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetPreviousClose() string { return v.PreviousClose }

// GetTypename returns SecurityMarketDataQuote.Typename, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataQuote) GetTypename() *string { return v.Typename }

func (v *SecurityMarketDataQuote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SecurityMarketDataQuote
		QuotedAsOf json.RawMessage `json:"quotedAsOf"`
		QuoteDate  json.RawMessage `json:"quoteDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SecurityMarketDataQuote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.QuotedAsOf
		src := firstPass.QuotedAsOf
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SecurityMarketDataQuote.QuotedAsOf: %w", err)
			}
		}
	}

	{
		dst := &v.QuoteDate
		src := firstPass.QuoteDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SecurityMarketDataQuote.QuoteDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSecurityMarketDataQuote struct {
	Bid string `json:"bid"`

	Ask string `json:"ask"`

	Open string `json:"open"`

	High string `json:"high"`

	Low string `json:"low"`

	Volume int `json:"volume"`

	AskSize int `json:"askSize"`

	BidSize int `json:"bidSize"`

	Last string `json:"last"`

	LastSize int `json:"lastSize"`

	QuotedAsOf json.RawMessage `json:"quotedAsOf"`

	QuoteDate json.RawMessage `json:"quoteDate"`

	Amount string `json:"amount"`

	PreviousClose string `json:"previousClose"`

	Typename *string `json:"__typename"`
}

func (v *SecurityMarketDataQuote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SecurityMarketDataQuote) __premarshalJSON() (*__premarshalSecurityMarketDataQuote, error) {
	var retval __premarshalSecurityMarketDataQuote

	retval.Bid = v.Bid
	retval.Ask = v.Ask
	retval.Open = v.Open
	retval.High = v.High
	retval.Low = v.Low
	retval.Volume = v.Volume
	retval.AskSize = v.AskSize
	retval.BidSize = v.BidSize
	retval.Last = v.Last
	retval.LastSize = v.LastSize
	{

		dst := &retval.QuotedAsOf
		src := v.QuotedAsOf
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal SecurityMarketDataQuote.QuotedAsOf: %w", err)
			}
		}
	}
	{

		dst := &retval.QuoteDate
		src := v.QuoteDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal SecurityMarketDataQuote.QuoteDate: %w", err)
			}
		}
	}
	retval.Amount = v.Amount
	retval.PreviousClose = v.PreviousClose
	retval.Typename = v.Typename
	return &retval, nil
}

// SecurityMarketDataStock includes the requested fields of the GraphQL type Stock.
type SecurityMarketDataStock struct {
	PrimaryExchange *string `json:"primaryExchange"`
	PrimaryMic      *string `json:"primaryMic"`
	Name            *string `json:"name"`
	Symbol          string  `json:"symbol"`
	Typename        *string `json:"__typename"`
}

// GetPrimaryExchange returns SecurityMarketDataStock.PrimaryExchange, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataStock) GetPrimaryExchange() *string { return v.PrimaryExchange }

// GetPrimaryMic returns SecurityMarketDataStock.PrimaryMic, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataStock) GetPrimaryMic() *string { return v.PrimaryMic }

// GetName returns SecurityMarketDataStock.Name, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataStock) GetName() *string { return v.Name }

// GetSymbol returns SecurityMarketDataStock.Symbol, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataStock) GetSymbol() string { return v.Symbol }

// GetTypename returns SecurityMarketDataStock.Typename, and is useful for accessing the field via an interface.
func (v *SecurityMarketDataStock) GetTypename() *string { return v.Typename }

// SimpleReturns includes the GraphQL fields of SimpleReturns requested by the fragment SimpleReturns.
type SimpleReturns struct {
	Amount        SimpleReturnsAmountMoney `json:"amount"`
	AsOf          *time.Time               `json:"-"`
	Rate          string                   `json:"rate"`
	ReferenceDate *time.Time               `json:"-"`
	Typename      *string                  `json:"__typename"`
}

// GetAmount returns SimpleReturns.Amount, and is useful for accessing the field via an interface.
func (v *SimpleReturns) GetAmount() SimpleReturnsAmountMoney { return v.Amount }

// GetAsOf returns SimpleReturns.AsOf, and is useful for accessing the field via an interface.
func (v *SimpleReturns) GetAsOf() *time.Time { return v.AsOf }

// GetRate returns SimpleReturns.Rate, and is useful for accessing the field via an interface.
func (v *SimpleReturns) GetRate() string { return v.Rate }

// GetReferenceDate returns SimpleReturns.ReferenceDate, and is useful for accessing the field via an interface.
func (v *SimpleReturns) GetReferenceDate() *time.Time { return v.ReferenceDate }

// GetTypename returns SimpleReturns.Typename, and is useful for accessing the field via an interface.
func (v *SimpleReturns) GetTypename() *string { return v.Typename }

func (v *SimpleReturns) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SimpleReturns
		AsOf          json.RawMessage `json:"asOf"`
		ReferenceDate json.RawMessage `json:"referenceDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SimpleReturns = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AsOf
		src := firstPass.AsOf
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SimpleReturns.AsOf: %w", err)
			}
		}
	}

	{
		dst := &v.ReferenceDate
		src := firstPass.ReferenceDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SimpleReturns.ReferenceDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSimpleReturns struct {
	Amount SimpleReturnsAmountMoney `json:"amount"`

	AsOf json.RawMessage `json:"asOf"`

	Rate string `json:"rate"`

	ReferenceDate json.RawMessage `json:"referenceDate"`

	Typename *string `json:"__typename"`
}

func (v *SimpleReturns) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SimpleReturns) __premarshalJSON() (*__premarshalSimpleReturns, error) {
	var retval __premarshalSimpleReturns

	retval.Amount = v.Amount
	{

		dst := &retval.AsOf
		src := v.AsOf
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal SimpleReturns.AsOf: %w", err)
			}
		}
	}
	retval.Rate = v.Rate
	{

		dst := &retval.ReferenceDate
		src := v.ReferenceDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal SimpleReturns.ReferenceDate: %w", err)
			}
		}
	}
	retval.Typename = v.Typename
	return &retval, nil
}

// SimpleReturnsAmountMoney includes the requested fields of the GraphQL type Money.
type SimpleReturnsAmountMoney struct {
	Money    `json:"-"`
	Typename *string `json:"__typename"`
}

// GetTypename returns SimpleReturnsAmountMoney.Typename, and is useful for accessing the field via an interface.
func (v *SimpleReturnsAmountMoney) GetTypename() *string { return v.Typename }

// GetAmount returns SimpleReturnsAmountMoney.Amount, and is useful for accessing the field via an interface.
func (v *SimpleReturnsAmountMoney) GetAmount() string { return v.Money.Amount }

// GetCents returns SimpleReturnsAmountMoney.Cents, and is useful for accessing the field via an interface.
func (v *SimpleReturnsAmountMoney) GetCents() int { return v.Money.Cents }

// GetCurrency returns SimpleReturnsAmountMoney.Currency, and is useful for accessing the field via an interface.
func (v *SimpleReturnsAmountMoney) GetCurrency() string { return v.Money.Currency }

func (v *SimpleReturnsAmountMoney) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SimpleReturnsAmountMoney
		graphql.NoUnmarshalJSON
	}
	firstPass.SimpleReturnsAmountMoney = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Money)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalSimpleReturnsAmountMoney struct {
	Typename *string `json:"__typename"`

	Amount string `json:"amount"`

	Cents int `json:"cents"`

	Currency string `json:"currency"`
}

func (v *SimpleReturnsAmountMoney) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SimpleReturnsAmountMoney) __premarshalJSON() (*__premarshalSimpleReturnsAmountMoney, error) {
	var retval __premarshalSimpleReturnsAmountMoney

	retval.Typename = v.Typename
	retval.Amount = v.Money.Amount
	retval.Cents = v.Money.Cents
	retval.Currency = v.Money.Currency
	return &retval, nil
}

// __FetchActivityFeedItemsInput is used internally by genqlient
type __FetchActivityFeedItemsInput struct {
	First     *int                `json:"first"`
	Cursor    *string             `json:"cursor"`
	Condition *ActivityCondition  `json:"condition"`
	OrderBy   []ActivitiesOrderBy `json:"orderBy"`
}

// GetFirst returns __FetchActivityFeedItemsInput.First, and is useful for accessing the field via an interface.
func (v *__FetchActivityFeedItemsInput) GetFirst() *int { return v.First }

// GetCursor returns __FetchActivityFeedItemsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__FetchActivityFeedItemsInput) GetCursor() *string { return v.Cursor }

// GetCondition returns __FetchActivityFeedItemsInput.Condition, and is useful for accessing the field via an interface.
func (v *__FetchActivityFeedItemsInput) GetCondition() *ActivityCondition { return v.Condition }

// GetOrderBy returns __FetchActivityFeedItemsInput.OrderBy, and is useful for accessing the field via an interface.
func (v *__FetchActivityFeedItemsInput) GetOrderBy() []ActivitiesOrderBy { return v.OrderBy }

// __FetchAllAccountFinancialsInput is used internally by genqlient
type __FetchAllAccountFinancialsInput struct {
	IdentityId string     `json:"identityId"`
	StartDate  *time.Time `json:"-"`
	PageSize   *int       `json:"pageSize"`
	Cursor     *string    `json:"cursor"`
}

// GetIdentityId returns __FetchAllAccountFinancialsInput.IdentityId, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountFinancialsInput) GetIdentityId() string { return v.IdentityId }

// GetStartDate returns __FetchAllAccountFinancialsInput.StartDate, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountFinancialsInput) GetStartDate() *time.Time { return v.StartDate }

// GetPageSize returns __FetchAllAccountFinancialsInput.PageSize, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountFinancialsInput) GetPageSize() *int { return v.PageSize }

// GetCursor returns __FetchAllAccountFinancialsInput.Cursor, and is useful for accessing the field via an interface.
func (v *__FetchAllAccountFinancialsInput) GetCursor() *string { return v.Cursor }

func (v *__FetchAllAccountFinancialsInput) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*__FetchAllAccountFinancialsInput
		StartDate json.RawMessage `json:"startDate"`
		graphql.NoUnmarshalJSON
	}
	firstPass.__FetchAllAccountFinancialsInput = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.StartDate
		src := firstPass.StartDate
		if len(src) != 0 && string(src) != "null" {
			*dst = new(time.Time)
			err = marshalling.UnmarshalStringToDateTime(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal __FetchAllAccountFinancialsInput.StartDate: %w", err)
			}
		}
	}
	return nil
}

type __premarshal__FetchAllAccountFinancialsInput struct {
	IdentityId string `json:"identityId"`

	StartDate json.RawMessage `json:"startDate"`

	PageSize *int `json:"pageSize"`

	Cursor *string `json:"cursor"`
}

func (v *__FetchAllAccountFinancialsInput) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *__FetchAllAccountFinancialsInput) __premarshalJSON() (*__premarshal__FetchAllAccountFinancialsInput, error) {
	var retval __premarshal__FetchAllAccountFinancialsInput

	retval.IdentityId = v.IdentityId
	{

		dst := &retval.StartDate
		src := v.StartDate
		if src != nil {
			var err error
			*dst, err = marshalling.MarshalTimeToDateTime(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal __FetchAllAccountFinancialsInput.StartDate: %w", err)
			}
		}
	}
	retval.PageSize = v.PageSize
	retval.Cursor = v.Cursor
	return &retval, nil
}

// __FetchSecurityMarketDataInput is used internally by genqlient
type __FetchSecurityMarketDataInput struct {
	Id string `json:"id"`
}

// GetId returns __FetchSecurityMarketDataInput.Id, and is useful for accessing the field via an interface.
func (v *__FetchSecurityMarketDataInput) GetId() string { return v.Id }

// The query or mutation executed by FetchActivityFeedItems.
const FetchActivityFeedItems_Operation = `
query FetchActivityFeedItems ($first: Int, $cursor: Cursor, $condition: ActivityCondition, $orderBy: [ActivitiesOrderBy!] = OCCURRED_AT_DESC) {
	activityFeedItems(first: $first, after: $cursor, condition: $condition, orderBy: $orderBy) {
		edges {
			node {
				... Activity
				__typename
			}
			__typename
		}
		pageInfo {
			hasNextPage
			endCursor
			__typename
		}
		__typename
	}
}
fragment Activity on ActivityFeedItem {
	accountId
	aftOriginatorName
	aftTransactionCategory
	aftTransactionType
	amount
	amountSign
	assetQuantity
	assetSymbol
	canonicalId
	currency
	eTransferEmail
	eTransferName
	externalCanonicalId
	identityId
	institutionName
	occurredAt
	p2pHandle
	p2pMessage
	spendMerchant
	securityId
	billPayCompanyName
	billPayPayeeNickname
	redactedExternalAccountNumber
	opposingAccountId
	status
	subType
	type
	strikePrice
	contractType
	expiryDate
	chequeNumber
	provisionalCreditAmount
	primaryBlocker
	interestRate
	frequency
	counterAssetSymbol
	rewardProgram
	counterPartyCurrency
	counterPartyCurrencyAmount
	counterPartyName
	fxRate
	fees
	reference
	__typename
}
`

func FetchActivityFeedItems(
	ctx_ context.Context,
	client_ graphql.Client,
	first *int,
	cursor *string,
	condition *ActivityCondition,
	orderBy []ActivitiesOrderBy,
) (*FetchActivityFeedItemsResponse, error) {
	req_ := &graphql.Request{
		OpName: "FetchActivityFeedItems",
		Query:  FetchActivityFeedItems_Operation,
		Variables: &__FetchActivityFeedItemsInput{
			First:     first,
			Cursor:    cursor,
			Condition: condition,
			OrderBy:   orderBy,
		},
	}
	var err_ error

	var data_ FetchActivityFeedItemsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FetchAllAccountFinancials.
const FetchAllAccountFinancials_Operation = `
query FetchAllAccountFinancials ($identityId: ID!, $startDate: Date, $pageSize: Int = 25, $cursor: String) {
	identity(id: $identityId) {
		id
		... AllAccountFinancials
		__typename
	}
}
fragment AllAccountFinancials on Identity {
	accounts(filter: {}, first: $pageSize, after: $cursor) {
		pageInfo {
			hasNextPage
			endCursor
			__typename
		}
		edges {
			cursor
			node {
				... AccountWithFinancials
				__typename
			}
			__typename
		}
		__typename
	}
	__typename
}
fragment AccountWithFinancials on Account {
	... AccountWithLink
	... AccountFinancials
	__typename
}
fragment AccountWithLink on Account {
	... Account
	linkedAccount {
		... Account
		__typename
	}
	__typename
}
fragment AccountFinancials on Account {
	id
	custodianAccounts {
		id
		branch
		financials {
			current {
				... CustodianAccountCurrentFinancialValues
				__typename
			}
			__typename
		}
		__typename
	}
	financials {
		currentCombined {
			id
			... AccountCurrentFinancials
			__typename
		}
		__typename
	}
	__typename
}
fragment Account on Account {
	... AccountCore
	custodianAccounts {
		... CustodianAccount
		__typename
	}
	__typename
}
fragment CustodianAccountCurrentFinancialValues on CustodianAccountCurrentFinancialValues {
	deposits {
		... Money
		__typename
	}
	earnings {
		... Money
		__typename
	}
	netDeposits {
		... Money
		__typename
	}
	netLiquidationValue {
		... Money
		__typename
	}
	withdrawals {
		... Money
		__typename
	}
	__typename
}
fragment AccountCurrentFinancials on AccountCurrentFinancials {
	id
	netLiquidationValueV2 {
		... Money
		__typename
	}
	netDeposits {
		... Money
		__typename
	}
	simpleReturns(referenceDate: $startDate) {
		... SimpleReturns
		__typename
	}
	totalDeposits {
		... Money
		__typename
	}
	totalWithdrawals {
		... Money
		__typename
	}
	__typename
}
fragment AccountCore on Account {
	id
	archivedAt
	branch
	closedAt
	createdAt
	cacheExpiredAt
	currency
	requiredIdentityVerification
	unifiedAccountType
	supportedCurrencies
	nickname
	status
	accountOwnerConfiguration
	accountFeatures {
		... AccountFeature
		__typename
	}
	accountOwners {
		... AccountOwner
		__typename
	}
	type
	__typename
}
fragment CustodianAccount on CustodianAccount {
	id
	branch
	custodian
	status
	updatedAt
	__typename
}
fragment Money on Money {
	amount
	cents
	currency
	__typename
}
fragment SimpleReturns on SimpleReturns {
	amount {
		... Money
		__typename
	}
	asOf
	rate
	referenceDate
	__typename
}
fragment AccountFeature on AccountFeature {
	name
	enabled
	__typename
}
fragment AccountOwner on AccountOwner {
	accountId
	identityId
	accountNickname
	clientCanonicalId
	accountOpeningAgreementsSigned
	name
	email
	ownershipType
	activeInvitation {
		... AccountOwnerInvitation
		__typename
	}
	sentInvitations {
		... AccountOwnerInvitation
		__typename
	}
	__typename
}
fragment AccountOwnerInvitation on AccountOwnerInvitation {
	id
	createdAt
	inviteeName
	inviteeEmail
	inviterName
	inviterEmail
	updatedAt
	sentAt
	status
	__typename
}
`

func FetchAllAccountFinancials(
	ctx_ context.Context,
	client_ graphql.Client,
	identityId string,
	startDate *time.Time,
	pageSize *int,
	cursor *string,
) (*FetchAllAccountFinancialsResponse, error) {
	req_ := &graphql.Request{
		OpName: "FetchAllAccountFinancials",
		Query:  FetchAllAccountFinancials_Operation,
		Variables: &__FetchAllAccountFinancialsInput{
			IdentityId: identityId,
			StartDate:  startDate,
			PageSize:   pageSize,
			Cursor:     cursor,
		},
	}
	var err_ error

	var data_ FetchAllAccountFinancialsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FetchSecurityMarketData.
const FetchSecurityMarketData_Operation = `
query FetchSecurityMarketData ($id: ID!) {
	security(id: $id) {
		id
		... SecurityMarketData
		__typename
	}
}
fragment SecurityMarketData on Security {
	id
	allowedOrderSubtypes
	marginRates {
		... MarginRates
		__typename
	}
	fundamentals {
		avgVolume
		high52Week
		low52Week
		yield
		peRatio
		marketCap
		currency
		description
		__typename
	}
	quote {
		bid
		ask
		open
		high
		low
		volume
		askSize
		bidSize
		last
		lastSize
		quotedAsOf
		quoteDate
		amount
		previousClose
		__typename
	}
	stock {
		primaryExchange
		primaryMic
		name
		symbol
		__typename
	}
	__typename
}
fragment MarginRates on MarginRates {
	clientMarginRate
	__typename
}
`

func FetchSecurityMarketData(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*FetchSecurityMarketDataResponse, error) {
	req_ := &graphql.Request{
		OpName: "FetchSecurityMarketData",
		Query:  FetchSecurityMarketData_Operation,
		Variables: &__FetchSecurityMarketDataInput{
			Id: id,
		},
	}
	var err_ error

	var data_ FetchSecurityMarketDataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
